{"version":3,"sources":["types/mapTypes.ts","components/mapMarker/styled.ts","components/mapMarker/mapMarker.tsx","components/googleMap/styled.ts","components/googleMap/googleMap.tsx","components/mapWrapper/mapWrapper.tsx","containers/home/styled.ts","containers/home/HomeView.tsx","components/autoComplete/autoComplete.tsx","containers/home/formHelper.tsx","types/destinationTypes.ts","redux/ducks/stores/storesInitialstate.ts","api/storeAPI.ts","redux/ducks/stores/storesSlice.ts","redux/ducks/destination/destinationInitialstate.ts","redux/ducks/destination/destinationSlice.ts","containers/home/index.ts","containers/home/HomeContainer.tsx","themes/theme.ts","App/App.tsx","redux/store.ts","utils/serviceWorker.ts","index.tsx"],"names":["MarkerType","breatheAnimation","keyframes","styles","MarkerPosCentered","styled","div","props","size","color","type","Store","Distance","hoover","MapMarker","$hover","className","User","HomeRounded","StorefrontRounded","MapRounded","Time","AlarmOnRounded","Wrapper","main","GoogleMap","process","REACT_APP_MAPS_API_KEY","children","bootstrapURLKeys","key","language","libraries","MapWrapper","userMarker","storesMarkers","onApiLoad","mapCenter","onMarkerMove","zoom","useState","draggable","mapOptions","setmapOptions","draggableMarker","setDraggableMarker","useEffect","console","log","onMarkerMoveStart","childKey","childProps","mouse","id","coordinates","latitude","lat","longitude","lng","onClick","value","Markers","map","marker","index","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","ref","autoCompleteService","places","AutocompleteService","placesService","PlacesService","directionService","DirectionsService","geoCoderService","Geocoder","onChildMouseEnter","onChildMouseLeave","onChange","onChildMouseDown","onChildMouseUp","onChildMouseMove","hoverDistance","distanceToMouse","markerPos","mousePos","markerProps","x","y","Math","sqrt","AutoFieldType","TextField","MTextField","InputAdornment","MInputAdornment","FormControlLabel","MFormControlLabel","Switch","MSwitch","Button","MButton","AutoCompleteFieldWraper","PanelContainer","HelperLabel","h1","OptionsPanel","Board","Title","MapContainer","ModalContent","AutoCompleteField","inputValue","setInputValue","selectedValue","setSelectedValue","options","setOptions","populteOptions","a","length","onTyping","onSelection","Autocomplete","filterOptions","autoComplete","includeInputInList","filterSelectedOptions","getOptionLabel","option","event","newValue","onClose","onInputChange","newInputValue","renderInput","params","label","variant","TextFieldsFormHelper","checkedB","setCheckedB","handleSwitch","checked","Fragment","destinationObj","name","onTextFieldValueChange","InputProps","startAdornment","position","DynamicFeed","required","error","addressValue","city","helperText","placeholder","description","AddAlert","address","EditLocation","address_two","Apartment","country","Public","state","LineStyle","LocationCity","zip_code","Dialpad","control","endIcon","Send","submitForm","LocalizationFindersHelper","locationLoaded","onAutoCompleFieldOnTyping","onCenterFieldSelection","CENTER","ADDRESS","SearchNearestBy","HomeView","nearest","destination","storesList","mapServices","onDestinationSubmit","getAllStoresInCity","setMapCenter","isDraggable","destMarkPost","setDestMarkPost","storeMarkPos","setStoreMarkPos","setDestinationObj","setAddressValue","React","openModal","setOpenModal","mapInitialLatLng","setDestinationMarker","geocode","location","response","formatted_address","split","slice","toString","store","nearestMarker","push","destMarker","fillDestinationObj","geoCodeRespose","filterbyType","type_tag","address_components","filter","part","types","includes","long_name","geometry","searchQuery","callback","undefined","input","fields","LatLng","radius","getQueryPredictions","dataSource","resp","field","target","isValid","ignoreKeys","valid","validateDestination","Modal","open","initialState","cityStores","distance","time","getNearestStore","url","config","headers","searchBy","filters","hi","data","axios","post","getStoresInCity","get","storesSlice","createSlice","reducers","setStoresByCity","action","payload","setStoresNearestTime","setStoresNearestDistance","addStoreToCity","somethingFailed","info","failingAcknowledgement","actions","searchOpen","items","quantity","destinationSlice","setDestination","setFilters","addItemToOrder","alreadyThere","findIndex","elem","deleteItemFromOrder","HomeContainer","defaultCenter","dispatch","useDispatch","useSelector","stores","setMapServices","setLocationLoaded","gServices","navigator","geolocation","getCurrentPosition","pos","coords","err","sentDestinationToApi","getState","destDetails","results","nearestStore","storeByCity","theme","App","configureStore","reducer","user","destinationReducer","storesReducer","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+MAqBYA,E,oHAAAA,O,iBAAAA,I,eAAAA,I,eAAAA,I,wBAAAA,M,uxBCZZ,IAAMC,EAAmBC,YAAH,KA4CPC,EAJA,CACbC,kBAjCwBC,IAAOC,IAAV,KAEZ,SAACC,GAAD,OAAWA,EAAMC,MAAQ,KACxB,SAACD,GAAD,OAAWA,EAAMC,MAAQ,KAC3B,SAACD,GAAD,OAAYA,EAAMC,KAAO,GAAK,KAC/B,SAACD,GAAD,OAAYA,EAAMC,KAAO,GAAK,KAKvB,SAACD,GACb,IAAIE,EAAQ,gBAGZ,OAFIF,EAAMG,OAASV,EAAWW,QAAOF,EAAQ,aACzCF,EAAMG,OAASV,EAAWY,WAAUH,EAAQ,QACzCA,IAGSR,GAEW,SAACM,GAAD,OAAYA,EAAMM,OAAS,WAAa,WCXxDC,EAfG,SAACP,GACjB,OACE,kBAAC,EAAOH,kBAAR,CACES,OAAQN,EAAMQ,OACdP,KAAM,EACNQ,UAAU,WACVN,KAAMH,EAAMG,MAEXH,EAAMG,OAASV,EAAWiB,MAAQ,kBAACC,EAAA,EAAD,MAClCX,EAAMG,OAASV,EAAWW,OAAS,kBAACQ,EAAA,EAAD,MACnCZ,EAAMG,OAASV,EAAWY,UAAY,kBAACQ,EAAA,EAAD,MACtCb,EAAMG,OAASV,EAAWqB,MAAQ,kBAACC,EAAA,EAAD,Q,iICpBzC,IAAMC,EAAUlB,IAAOmB,KAAV,KCoBEC,GAjBCC,4TAAYC,uBAEV,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAarB,EAAhB,mCAChB,kBAACgB,EAAD,KACE,kBAAC,IAAD,eACEM,iBAAkB,CAChBC,IAAKJ,0CACLK,SAAU,KACVC,UAAW,CAAC,SAAU,gBAEpBzB,GAEHqB,MC+GQK,EA5GgC,SAAC,GAOvB,IANvBC,EAMsB,EANtBA,WACAC,EAKsB,EALtBA,cACAC,EAIsB,EAJtBA,UACAC,EAGsB,EAHtBA,UACAC,EAEsB,EAFtBA,aACAC,EACsB,EADtBA,KACsB,EACcC,mBAAS,CAC3CC,WAAW,IAFS,mBACfC,EADe,KACHC,EADG,OAMwBH,mBAAkBN,GAN1C,mBAMfU,EANe,KAMEC,EANF,KAQtBC,qBAAU,WACRD,EAAmBX,GACnBa,QAAQC,IAAId,EAAYC,KACvB,CAACD,EAAYC,IAEhB,IAAMc,EAAoB,SAACC,EAAeC,EAAiBC,GACrDR,EAAgBS,IAAMH,IAG1BP,EAAc,2BACTD,GADQ,IAEXD,WAAW,KAEbI,EAAmB,2BACdD,GADa,IAEhBU,YAAa,CACXC,SAAUH,EAAMI,IAChBC,UAAWL,EAAMM,UAkBjBC,EAAU,SAACC,KAoBXC,EACJjB,GACAT,GACA,CACES,GADF,mBAEKT,IACH2B,KAAI,SAACC,EAAiBC,GAAlB,OACJ,kBAAC,EAAD,CACElC,IAAKkC,EACLR,IAAKO,EAAOT,YAAYC,SACxBG,IAAKK,EAAOT,YAAYG,UACxB/C,KAAMqD,EAAOrD,KACbiD,QAASA,OAIf,OACE,kBAAC,EAAD,CACEM,OAAQ5B,EAAU4B,OAClBC,YAAa3B,GA9EG,GA+EhB4B,oCAAoC,EACpCC,kBA/BiB,SAAC,GAAwB,IAAtBN,EAAqB,EAArBA,IAAKO,EAAgB,EAAhBA,KAAgB,EAAVC,IACjClC,EAAU,CACRiC,OACAE,oBAAqB,IAAIF,EAAKG,OAAOC,oBACrCC,cAAe,IAAIL,EAAKG,OAAOG,cAAcb,GAC7Cc,iBAAkB,IAAIP,EAAKQ,kBAC3BC,gBAAiB,IAAIT,EAAKU,YA0B1BC,kBA9CsB,SAAClD,EAAKqB,KA+C5B8B,kBA7CsB,SAACnD,EAAKqB,KA8C5BQ,QAASA,EACTlB,UAAWC,EAAWD,UACtByC,SApDa,SAAC,GAAqB,EAAnBjB,OAAmB,EAAX1B,MAqDxB4C,iBAAkBlC,EAClBmC,eA9DoB,SAAClC,EAAeC,EAAiBC,GACvDT,EAAc,2BAAKD,GAAN,IAAkBD,WAAW,KAC1CH,EAAa,CACXkB,IAAKJ,EAAMI,IACXE,IAAKN,EAAMM,OA2DX2B,iBAAkBpC,EAClBqC,cAxF0B,GAyF1BC,gBAjDoB,SAACC,EAAWC,EAAUC,GAC5C,IAAMC,EAAIH,EAAUG,EACdC,EAAIJ,EAAUI,EACpB,OAAOC,KAAKC,MACTH,EAAIF,EAASE,IAAMA,EAAIF,EAASE,IAAMC,EAAIH,EAASG,IAAMA,EAAIH,EAASG,MA+CtE/B,I,8uGCjHA,ICiBKkC,EDjBCC,GAAY3F,YAAO4F,IAAP5F,CAAH,KACT6F,GAAiB7F,YAAO8F,IAAP9F,CAAH,KACd+F,GAAmB/F,YAAOgG,IAAPhG,CAAH,KAChBiG,GAASjG,YAAOkG,IAAPlG,CAAH,KACNmG,GAASnG,YAAOoG,IAAPpG,CAAH,KAIbqG,GAA0BrG,IAAOC,IAAV,KACvBqG,GAAiBtG,IAAOC,IAAV,KAMdsG,GAAcvG,IAAOwG,GAAV,KAMXC,GAAezG,IAAOC,IAAV,IAMd0F,GAGAQ,GAKAN,GAGAU,GAUAR,IAMEW,GAAQ1G,IAAOC,IAAV,IASPoG,GAGAF,IAIEQ,GAAQ3G,IAAOwG,GAAV,KASLI,GAAe5G,IAAOC,IAAV,KAiBZ4G,GAAe7G,IAAOC,IAAV,KA6CHH,GAZA,CACb6G,SACAF,gBACAH,kBACAI,SACAf,aACAiB,gBACAP,2BACAE,eACAM,iB,oGEtEaC,GA5D8C,SAC3D5G,GACI,IAAD,EACiCiC,mBAAS,IAD1C,mBACI4E,EADJ,KACgBC,EADhB,OAEuC7E,mBAAS,IAFhD,mBAEI8E,EAFJ,KAEmBC,EAFnB,OAG2B/E,mBAAwB,IAHnD,mBAGIgF,EAHJ,KAGaC,EAHb,KAKGC,EAAc,uCAAG,WAAOF,GAAP,SAAAG,EAAA,sDACrBF,EAAWD,GADU,2CAAH,sDA2BpB,OAvBA1E,qBAAU,cAAU,CAACvC,IAErBuC,qBAAU,WACFsE,EAAWQ,OAAS,IAGtBrH,EAAMsH,UAAqC,mBAAlBtH,EAAMsH,WACVtH,EAAMsH,SAC3BtH,EAAM8C,GACN+D,EACAM,IAEqBA,EAAe,QAEvC,CAACN,IAEJtE,qBAAU,WACHwE,GAAmBA,EAAcM,OAAS,GAG3CrH,EAAMuH,aAAavH,EAAMuH,YAAYvH,EAAM8C,GAAIiE,KAClD,CAACA,IAGF,kBAACS,GAAA,EAAD,CACE1E,GAAE,4BAAuB9C,EAAM8C,IAC/B2E,cAAe,SAACrC,GAAD,OAAOA,GACtB6B,QAASA,EACTS,cAAY,EACZC,oBAAkB,EAClBC,uBAAqB,EACrBC,eAAgB,SAACC,GAAD,OAAYA,GAC5BzE,MAAOrD,EAAMqD,MACbsB,SAAU,SAACoD,EAAYC,GACrBhB,EAAiBgB,IAEnBC,QAAS,SAACF,GACRb,EAAW,KAEbgB,cAAe,SAACH,EAAYI,GAC1BrB,EAAcqB,IAEhBC,YAAa,SAACC,GAAD,OACX,kBAAC5C,EAAA,EAAD,iBAAe4C,EAAf,CAAuBC,MAAOtI,EAAMsI,MAAOC,QAAQ,kBCjD9CC,GAAuB,SAACxI,GAAW,IAAD,EACbiC,oBAAS,GADI,mBACtCwG,EADsC,KAC5BC,EAD4B,KAGvCC,EAAe,SAACZ,EAA8Ba,GAClDF,EAAYE,IAGd,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,GAAOxC,YAAR,qEAGA,kBAAC,GAAD,CACEqB,aAAa,MACbrE,MAAOrD,EAAM8I,eAAeC,KAC5BpE,SAAU3E,EAAMgJ,uBAAuB,QACvCV,MAAO,wBACPC,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACC,GAAA,EAAD,QAINC,UAAQ,EACRC,MAA8B,KAAvBtJ,EAAMuJ,cAAqD,KAA9BvJ,EAAM8I,eAAeU,KACzDC,WAAW,sBACXC,YAAa,6CAGf,kBAAC,GAAD,CACEpB,MAAO,kBACPjF,MAAOrD,EAAM8I,eAAea,YAC5BhF,SAAU3E,EAAMgJ,uBAAuB,eACvCT,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACS,GAAA,EAAD,QAINF,YAAa,uDAGf,kBAAC,GAAD,CACEhC,aAAa,MACbrE,MAAOrD,EAAM8I,eAAee,QAC5BlF,SAAU3E,EAAMgJ,uBAAuB,WACvCV,MAAO,UACPC,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACW,GAAA,EAAD,QAINT,UAAQ,EACRC,MAA8B,KAAvBtJ,EAAMuJ,cAAqD,KAA9BvJ,EAAM8I,eAAeU,KACzDC,WAAW,wBAGb,kBAAC,GAAD,CACEnB,MAAO,cACPjF,MAAOrD,EAAM8I,eAAeiB,YAC5BpF,SAAU3E,EAAMgJ,uBAAuB,eACvCT,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACa,GAAA,EAAD,QAINN,YAAa,yDAGf,kBAAC,GAAD,CACEhC,aAAa,MACbY,MAAO,UACP3D,SAAU3E,EAAMgJ,uBAAuB,WACvC3F,MAAOrD,EAAM8I,eAAemB,QAC5B1B,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACe,GAAA,EAAD,QAINb,UAAQ,EACRC,MAA8B,KAAvBtJ,EAAMuJ,cAAqD,KAA9BvJ,EAAM8I,eAAeU,KACzDC,WAAW,wBAGb,kBAAC,GAAD,CACE/B,aAAa,MACbrE,MAAOrD,EAAM8I,eAAeqB,MAC5BxF,SAAU3E,EAAMgJ,uBAAuB,SACvCV,MAAO,QACPC,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACiB,GAAA,EAAD,QAINf,UAAQ,EACRC,MAA8B,KAAvBtJ,EAAMuJ,cAAsD,KAA/BvJ,EAAM8I,eAAeqB,MACzDV,WAAW,wBAGb,kBAAC,GAAD,CACE/B,aAAa,MACbrE,MAAOrD,EAAM8I,eAAeU,KAC5B7E,SAAU3E,EAAMgJ,uBAAuB,QACvCV,MAAO,OACPC,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACkB,GAAA,EAAD,QAINhB,UAAQ,EACRC,MAA8B,KAAvBtJ,EAAMuJ,cAAqD,KAA9BvJ,EAAM8I,eAAeU,KACzDC,WAAW,wBAGb,kBAAC,GAAD,CACE/B,aAAa,MACbrE,MAAOrD,EAAM8I,eAAewB,SAC5B3F,SAAU3E,EAAMgJ,uBAAuB,YACvCV,MAAO,WACPC,QAAQ,WACRU,WAAY,CACVC,eACE,kBAAC,GAAD,CAAgBC,SAAS,SACvB,kBAACoB,GAAA,EAAD,QAINlB,UAAQ,EACRC,MACyB,KAAvBtJ,EAAMuJ,cAAyD,KAAlCvJ,EAAM8I,eAAewB,SAEpDb,WAAW,wBAGb,kBAAC,GAAOpD,YAAR,4DAIA,6DACA,kBAAC,GAAD,CACEmE,QACE,kBAAC,GAAD,CACE5B,QAASH,EACT9D,SAAUgE,EACVI,KAAK,WACL7I,MAAM,cAGVoI,MAAM,yBAER,sEAEA,kBAAC,GAAD,CACEkC,QACE,kBAAC,GAAD,CACE5B,QAASH,EACT9D,SAAUgE,EACVI,KAAK,WACL7I,MAAM,cAGVoI,MAAM,sBAER,0DACA,kBAAC,GAAD,CACEkC,QACE,kBAAC,GAAD,CACE5B,QAASH,EACT9D,SAAUgE,EACVI,KAAK,WACL7I,MAAM,cAGVoI,MAAM,mBAGR,kBAAC,GAAD,CACEC,QAAQ,YACRrI,MAAM,YACNuK,QAAS,kBAACC,GAAA,EAAD,MACTtH,QAASpD,EAAM2K,YAJjB,cAYOC,GAA4B,SAAC5K,GAAgB,IAEtDuJ,EAKEvJ,EALFuJ,aACAsB,EAIE7K,EAJF6K,eACA/I,EAGE9B,EAHF8B,UACAgJ,EAEE9K,EAFF8K,0BACAC,EACE/K,EADF+K,uBAEF,OACE,kBAAC,IAAMlC,SAAP,KACE,kBAAC,GAAO1C,wBAAR,MACI0E,GACA,kBAAC,GAAOxE,YAAR,8GAKDwE,GACC,kBAAC,GAAOxE,YAAR,kDAC6CvE,EAAUiH,KADvD,+EAMF,kBAAC,GAAD,CACEjG,GAAI0C,EAAcwF,OAClB1C,MAAO,uBACPjF,MAAOvB,EAAYA,EAAUiH,KAAO,GACpCzB,SAAUwD,EACVvD,YAAawD,KAGjB,kBAAC,GAAO5E,wBAAR,KACE,kBAAC,GAAOE,YAAR,2FAIA,kBAAC,GAAD,CACEvD,GAAI0C,EAAcyF,QAClB3C,MAAO,UACPjF,MAAOkG,EACPjC,SAAUwD,EACVvD,YAAawD,O,oBFrPXvF,K,gBAAAA,E,mBAAAA,M,KAKZ,IGdY0F,GHyUGC,GA3TE,SAAC,GASK,IARrBC,EAQoB,EARpBA,QACAC,EAOoB,EAPpBA,YACAC,EAMoB,EANpBA,WACAC,EAKoB,EALpBA,YACA1J,EAIoB,EAJpBA,UACAgJ,EAGoB,EAHpBA,eACAW,EAEoB,EAFpBA,oBACAC,EACoB,EADpBA,mBACoB,EACcxJ,mBAAqB,CACrDyB,OAAQ,CAAET,IAAK,EAAGE,IAAK,GACvB4F,KAAM,KAHY,mBACbjH,EADa,KACF4J,EADE,OAKoBzJ,mBAAkB,CACxD0J,aAAa,EACb7I,GAAI,EACJC,YAAa,CACXC,SAAUqI,EAAYrI,SACtBE,UAAWmI,EAAYnI,WAEzB6F,KAAMsC,EAAYtC,KAClB5I,KAAMV,EAAWiB,OAbC,mBAKbkL,EALa,KAKCC,EALD,OAeoB5J,mBAAoB,IAfxC,mBAeb6J,EAfa,KAeCC,EAfD,OAgBwB9J,mBAC1CoJ,GAjBkB,mBAgBbvC,EAhBa,KAgBGkD,EAhBH,OAmBoB/J,mBAAS,IAnB7B,mBAmBbsH,EAnBa,KAmBC0C,EAnBD,OAoBcC,IAAMjK,UAAS,GApB7B,mBAoBbkK,EApBa,KAoBFC,EApBE,KAsBpB7J,qBAAU,WACR,GAAIgJ,GAAeA,EAAYc,iBAAkB,CAC/C,IAAM3I,EAAS,CACbT,IAAKsI,EAAYc,iBAAiBpJ,MAClCE,IAAKoI,EAAYc,iBAAiBlJ,OAEhC4F,EAAO,GACP8B,IACFyB,EAAqB5I,GACrB6H,EAAYhH,gBAAgBgI,QAC1B,CAAEC,SAAU9I,IACZ,SAAC+I,GACC1D,EAAO0D,EAAS,GAAGC,kBAAkBC,MAAM,KAAKC,MAAM,GAAGC,WACzDnB,EAAa,CACXhI,SACAqF,aAKR2C,EAAa,CACXhI,SACAqF,YAGH,CAACwC,EAAaV,IAEjBtI,qBAAU,WACR,IAAMX,EACJ0J,GACAA,EAAW/H,KAAI,SAACuJ,GAAD,MAAY,CACzBnB,aAAa,EACb7I,GAAIgK,EAAMhK,GACVC,YAAa,CACXC,SAAU8J,EAAM9J,SAChBE,UAAW4J,EAAM5J,WAEnB6F,KAAM+D,EAAM/D,KACZ5I,KAAMV,EAAWW,UAGf2M,EAAqC3B,GAAW,CACpDO,aAAa,EACb7I,GAAIsI,EAAQtI,GACZC,YAAa,CACXC,SAAUoI,EAAQpI,SAClBE,UAAWkI,EAAQlI,WAErB6F,KAAMqC,EAAQrC,KACd5I,KAAMV,EAAWY,UAGf0M,GAAenL,EAAcoL,KAAKD,GACtChB,EAAgBnK,KACf,CAAC0J,EAAYF,IAEhB7I,qBAAU,WACR,IAAM0K,EAAa,CACjBtB,aAAa,EACb7I,GAAI,EACJC,YAAa,CACXC,SAAUqI,EAAYrI,SACtBE,UAAWmI,EAAYnI,WAEzB6F,KAAMsC,EAAYtC,KAClB5I,KAAMV,EAAWiB,MAEnBmL,EAAgBoB,KACf,CAAC5B,IAEJ,IAAM6B,EAAqB,SAACC,GAC1B,IAAMC,EAAe,SAACC,GACpB,IAAMhK,EAAQ8J,EAAeG,mBAAmBC,QAAO,SAACC,GAAD,OACrDA,EAAKC,MAAMC,SAASL,MAEtB,OAAOhK,EAAMgE,OAAS,EAAIhE,EAAM,GAAGsK,UAAY,IAG7CtC,EAAc,CAChBf,SAAU8C,EAAa,eACvBnD,QAASmD,EAAa,WACtB5D,KAAM4D,EAAa,YACnBjD,MAAOiD,EAAa,+BACpBvD,QAASsD,EAAeT,kBAAkBC,MAAM,KAAK,GACrD3J,SAAUmK,EAAeS,SAASpB,SAASvJ,MAC3CC,UAAWiK,EAAeS,SAASpB,SAASrJ,OAG9C6I,EAAkB,2BAAKlD,GAAmBuC,IAC1CY,EAAgBkB,EAAeT,mBAC/BhB,EAAa,2BACR5J,GADO,IAEViH,KAAMoE,EAAeT,kBAAkBC,MAAM,KAAKC,MAAM,GAAGC,eAIzD9B,EAAyB,SAACxJ,EAAauG,GAC3C,GAAKyD,EAAYhH,gBAAjB,CAGA,IAAMsJ,EAAc,CAClBhE,QAAS/B,GAEXyD,EAAYhH,gBAAgBgI,QAAQsB,GAAa,SAACpB,GAAc,IACtDD,EAAaC,EAAS,GAAGmB,SAAzBpB,SACF9I,EAAS,CACbT,IAAKuJ,EAASvJ,MACdE,IAAKqJ,EAASrJ,OAEZ5B,IAAQiE,EAAcwF,QACxBU,EAAa,2BACR5J,GADO,IAEV4B,SACAqF,KAAMjB,KAINvG,IAAQiE,EAAcyF,SACxBiC,EAAmBT,EAAS,IAG9BH,EAAqB5I,QAInBoH,EAAyB,uCAAG,WAChCvJ,EACA8B,EACAyK,GAHgC,eAAA1G,EAAA,yDAK3BmE,EAAYzH,MAASyH,EAAYvH,oBALN,8CAMvB+J,GANuB,cAQ5BF,EAAmB,CACrBG,MAAO3K,GAGL9B,IAAQiE,EAAcwF,SACxB6C,EAAW,2BACNA,GADM,IAETI,OAAQ,CAAC,WAIT1M,IAAQiE,EAAcyF,UACxB4C,EAAW,2BACNA,GADM,IAETrB,SAAU,IAAIjB,EAAYzH,KAAKoK,OAC7BpM,EAAU4B,OAAOT,IACjBnB,EAAU4B,OAAOP,KAEnBgL,OAAQ,IACRV,MAAO,CAAC,gBAAiB,iBAAkB,gBAAiB,YAIhElC,EAAYvH,oBAAoBoK,oBAC9BP,GACA,SAACpB,GACC,GAAIA,EAAU,CACZ,IAAM4B,EAA4B5B,EAASlJ,KACzC,SAAC+K,GAAD,OAAUA,EAAK3E,eAGjB,OADAmE,EAASO,GACFA,MAvCmB,uBA4CzBN,GA5CyB,2CAAH,0DA+CzBzB,EAAuB,SAACE,GACvBZ,GAGLC,EAAgB,2BACXD,GADU,IAEb7I,YAAa,CACXC,SAAUwJ,EAASvJ,IACnBC,UAAWsJ,EAASrJ,SAWpB6F,EAAyB,SAACuF,GAAD,OAAmB,SAACxG,GACjDiE,EAAkB,2BACblD,GADY,kBAEdyF,EAAQxG,EAAMyG,OAAOnL,WAuCpBsH,EAAa,SAAC5C,GAClB,IAAM0G,EAXoB,SAACpD,GAC3B,IAAMqD,EAAa,CAAC,cAAe,eAC/BC,GAAQ,EACZ,IAAK,IAAIpN,KAAO8J,EACdsD,EACEA,MAAUD,EAAWhB,SAASnM,IAAmC,KAArB8J,EAAY9J,IAE5D,OAAOoN,EAISC,CAAoB9F,GAC/B2F,EAILjD,EAAoB1C,GAHlBsD,GAAcqC,IAMlB,OACE,kBAAC,IAAM5F,SAAP,KACE,kBAAC,GAAOpC,MAAR,mBACA,kBAAC,GAAOL,eAAR,KACE,kBAAC,GAAOG,aAAR,KA7CF,kBAAC,GAAD,CACEgD,aAAcA,EACdT,eAAgBA,EAChBE,uBAAwBA,EACxB2B,WAAYA,KA0CZ,kBAAC,GAAOnE,MAAR,KAlCF,kBAAC,GAAD,CACE+C,aAAcA,EACdsB,eAAgBA,EAChB/I,UAAWA,EACXgJ,0BAA2BA,EAC3BC,uBAAwBA,IA+BtB,kBAAC,GAAOrE,aAAR,KACE,kBAAC,EAAD,CACE/E,WAAYiK,EACZhK,cAAekK,EACfjK,UAAWA,EACXC,UAAWA,EACXC,aAtES,SAACyK,GACpBjB,EAAYhH,gBAAgBgI,QAAQ,CAAEC,aAAY,SAACC,GACjDS,EAAmBT,EAAS,WAuExB,kBAAC,GAAD,CACElE,QAAQ,YACRrI,MAAM,YACNkD,QAAS,kBAAMqI,EAAmB3J,EAAUiH,KAAK4D,MAAM,KAAK,MAH9D,iCASJ,kBAACkC,GAAA,EAAD,CAAOC,KAAM3C,EAAWlE,QAAS,kBAAMmE,GAAa,KAClD,kBAAC,GAAOzF,aAAR,KACE,6DACA,6FACA,kBAAC,GAAD,CACE4B,QAAQ,YACRrI,MAAM,YACNkD,QAAS,kBAAMgJ,GAAa,KAH9B,sB,SG5TElB,O,uBAAAA,I,gBAAAA,Q,kBCfC6D,GAA4B,CACvCzF,MAAO,KACP0F,WAAY,GAcZ5D,QAAS,CACP6D,cAAUlB,EAaVmB,UAAMnB,I,oBCxBH,SAAeoB,GAAtB,mC,8CAAO,WAA+B9D,GAA/B,qBAAAjE,EAAA,4DACY,WACXgI,EAFD,UAHiBjO,yBAGjB,OAFWA,WAEX,OACY,YAEXkO,EAA6B,CACjCC,QAAS,CACP,eAAgB,oBAElBjH,OAAQ,CACNkH,SAAUlE,EAAYmE,QAAQD,SAC9BE,IAAI,IAGFC,EAA4BrE,EAZ7B,SAagBsE,KAAMC,KAAuBR,EAAKM,EAAML,GAbxD,cAaD5C,EAbC,YAcLjK,QAdK,8CAc6CiK,EAd7C,2BAcuDiD,KAdvD,sCAcGjN,IAdH,0BAeSgK,EAfT,wCAemBiD,MAfnB,6C,sBAkBA,SAAeG,GAAtB,mC,8CAAO,WAA+BrG,GAA/B,mBAAApC,EAAA,6DACCgI,EADD,UArBiBjO,yBAqBjB,OApBWA,UAoBX,iBAC8CqI,GAC7C6F,EAA6B,CACjCC,QAAS,CACP,eAAgB,qBAJf,SAQgBK,KAAMG,IAAsBV,EAAKC,GARjD,cAQD5C,EARC,YASLjK,QATK,oCASoCiK,EATpC,0BAS8CiD,KAT9C,sCASGjN,IATH,0BAUSgK,EAVT,wCAUmBiD,MAVnB,6C,sBClBA,IAAMK,GAAcC,aAAY,CACrCjH,KAAM,SACNgG,gBACAkB,SAAU,CACRC,gBADQ,SACQ/F,EAAOgG,GACrBhG,EAAM6E,WAAamB,EAAOC,SAE5BC,qBAJQ,SAIalG,EAAOgG,GAC1BhG,EAAMiB,QAAQ8D,KAAOiB,EAAOC,SAE9BE,yBAPQ,SAOiBnG,EAAOgG,GAC9BhG,EAAMiB,QAAQ6D,SAAWkB,EAAOC,SAElCG,eAVQ,SAUOpG,EAAOgG,IACPhG,EAAM6E,YAAe,IAC3BhC,KAAKmD,EAAOC,UAErBI,gBAdQ,SAcQrG,EAAOgG,GACrBhG,EAAMb,MAAQ6G,EAAOC,QACrB5N,QAAQiO,KAAK,6BAEfC,uBAlBQ,SAkBevG,GACrBA,EAAMb,MAAQ,S,GAYhByG,GAAYY,QANdT,G,GAAAA,gBAEAI,I,GADAD,qB,GACAC,0BAEAE,I,GADAD,e,GACAC,iBACAE,G,GAAAA,uBA2CaX,MAAf,QClFahB,GAAoC,CAC/CzF,MAAO,KACP+B,YAAa,CACXtC,KAAM,GACNc,QAAS,GACTE,YAAa,GACbJ,YAAa,GACbM,QAAS,GACTT,KAAM,GACNc,SAAU,GACVH,MAAO,GACPnH,SAAU,kBACVE,WAAY,WAEdsM,QAAS,CACPD,SAAUrE,GAAgB+D,SAC1B2B,YAAY,GAEdC,MAAO,CACL,CACE9H,KAAM,OACN+H,SAAU,KCjBHC,GAAmBf,aAAY,CAC1CjH,KAAM,cACNgG,gBACAkB,SAAU,CACRe,eAAgB,SAAC7G,EAAOgG,GACtBhG,EAAMkB,YAAc8E,EAAOC,SAE7Ba,WAAY,SAAC9G,EAAOgG,GAClBhG,EAAMqF,QAAUW,EAAOC,SAGzBc,eAAgB,SAAC/G,EAAOgG,GACtB,IAAIU,EAAQ1G,EAAM0G,OAAS,GACvBM,EAAeN,EAAMO,WACvB,SAACC,GAAD,OAAUA,EAAKtI,OAASoH,EAAOC,QAAQrH,QAEzCoB,EAAM0G,MACJM,GAAgB,EAAhB,sBAESN,EAAMjE,MAAM,EAAGuE,IAFxB,CAGMhB,EAAOC,SAHb,YAISS,EAAMjE,MAAMuE,KAJrB,sBAMQN,GANR,CAMeV,EAAOC,WAE1BkB,oBAAqB,SAACnH,EAAOgG,GAC3B,IAAIU,EAAQ1G,EAAM0G,OAAS,GACvBM,EAAeN,EAAMO,WACvB,SAACC,GAAD,OAAUA,EAAKtI,OAASoH,EAAOC,QAAQrH,QAEzCoB,EAAM0G,MACJM,GAAgB,EAAhB,sBACQN,EAAMjE,MAAM,EAAGuE,IADvB,YACyCN,EAAMjE,MAAMuE,EAAe,KAChEhH,EAAM0G,OAEdL,gBAhCQ,SAgCQrG,EAAOgG,GACrBhG,EAAMb,MAAQ6G,EAAOC,QACrB5N,QAAQiO,KAAK,6BAEfC,uBApCQ,SAoCevG,GACrBA,EAAMb,MAAQ,S,GAYhByH,GAAiBJ,QANnBK,G,GAAAA,eAIAR,I,GAHAS,W,GACAC,e,GACAI,oB,GACAd,iBACAE,G,GAAAA,uBAiBaK,MAAf,QCxEeQ,GCSO,SAAC,GAAoB,eACzC,IAAMC,EAAuB,OAAvBA,EAAoC,SACpCC,EAAWC,cACXrG,EAA4BsG,aAChC,SAACxH,GAAD,OAAsBA,EAAMkB,YAAYA,eAEpCuG,EACJD,aAAY,SAACxH,GAAD,OAAsBA,EAAMyH,OAAO5C,eAAe,GAE1D5D,EAA8BuG,aAAY,SAACxH,GAAD,OAC9CA,EAAMkB,YAAYmE,QAAQD,WAAarE,GAAgB+D,SACnD9E,EAAMyH,OAAOxG,QAAQ6D,SACrB9E,EAAMyH,OAAOxG,QAAQ8D,QAZa,EAeFjN,mBAAc,IAfZ,mBAejCsJ,EAfiC,KAepBsG,EAfoB,OAgBI5P,oBAAS,GAhBb,mBAgBjC4I,EAhBiC,KAgBjBiH,EAhBiB,KAyCxCvP,qBAAU,WACRC,QAAQC,IAAI,yBAA0B8I,KACrC,CAACA,IAeJ,OACE,kBAAC,GAAD,CACE1J,UA1CqB,SAACkQ,GACxB,IAAIrO,EAAS,IAAIqO,EAAUjO,KAAKoK,OAC9BsD,EACAA,GAIEQ,WAAaA,UAAUC,aACzBD,UAAUC,YAAYC,oBACpB,SAACC,GACC,IAAMC,EAASD,EAAIC,OACnB1O,EAAS,IAAIqO,EAAUjO,KAAKoK,OAAOkE,EAAOpP,SAAUoP,EAAOlP,WAC3D2O,EAAe,2BAAKE,GAAN,IAAiB1F,iBAAkB3I,KACjDoO,GAAkB,MAEpB,SAACxI,GACC9G,QAAQ8G,MAAM,oBAAqBA,MAIzCuI,EAAe,2BAAKE,GAAN,IAAiB1F,iBAAkB3I,MAuB/C0H,QAASA,EACTG,YAAaA,EACbF,YAAaA,EACbC,WAAYsG,GAAU,GACtBpG,oBApBwB,SAACH,GAC3B7I,QAAQC,IAAI,kBAAmB4I,GAC/BoG,EFEgC,SAACpG,GAAD,OAAyC,SAC3EoG,GAEA,IACEA,EAAST,GAAe3F,IACxBoG,EAASf,MACT,MAAO2B,GACP7P,QAAQ8G,MAAR,6BAAoC+I,IACpCZ,EAASjB,GAAgB6B,MEVhBC,CAAqBjH,IAC9BoG,EJfwB,SAACpG,GAAD,8CAAyC,WACnEoG,EACAc,GAFmE,uBAAAnL,EAAA,wEAKxCmL,IAAWlH,YAA9BmE,EAL2D,EAK3DA,QAASqB,EALkD,EAKlDA,MAEX2B,EAAmC,CACrCnH,cACAmE,UACAqB,QACAvH,MAAO,MAXwD,SAa3B6F,GAAgBqD,GAbW,OAa7DpH,EAb6D,OAejEqG,EAASnB,GAAyBlF,EAAQqH,QAAQ,KAClDhB,EAASf,MAhBwD,kDAkBjElO,QAAQ8G,MAAR,oCACAmI,EAASjB,GAAgB,EAAD,KAnByC,0DAAzC,wDIefkC,CAAarH,KAkBpBR,eAAgBA,EAChBY,mBAhBuB,SAACjC,QACbuE,IAATvE,GAA+B,KAATA,GAG1BiI,EJCuB,SAACjI,GAAD,8CAA4B,WACrDiI,EACAc,GAFqD,eAAAnL,EAAA,+EAKdyI,GAAgBrG,GALF,OAK/CoI,EAL+C,OAOnDH,EAASvB,GAAgB0B,EAAOa,UAChChB,EAASf,MAR0C,gDAUnDlO,QAAQ8G,MAAR,oCACAmI,EAASjB,GAAgB,EAAD,KAX2B,yDAA5B,wDIDdmC,CAAYnJ,QClEZoJ,GAAQ,CACnB3R,KAAM,kBCeO4R,I,OAVO,WACpB,OACE,kBAAC,IAAD,CAAeD,MAAOA,IACpB,yBAAKnS,UAAU,OACb,kBAAC,GAAD,UCNKqM,GAAQgG,aAAe,CAClCC,QAAS,CACPC,KAAMC,GACN5H,YAAa4H,GACbrB,OAAQsB,MCIQC,QACW,cAA7BC,OAAO5G,SAAS6G,UAEe,UAA7BD,OAAO5G,SAAS6G,UAEhBD,OAAO5G,SAAS6G,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAU1G,MAAOA,IACf,kBAAC,GAAD,OAEF2G,SAASC,eAAe,SD4HpB,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1K,GACL9G,QAAQ8G,MAAMA,EAAM2K,c","file":"static/js/main.2db00074.chunk.js","sourcesContent":["export interface IGMapCoordinates {\r\n  lat: number;\r\n  lng: number;\r\n}\r\nexport interface IMapCenter {\r\n  center: IGMapCoordinates;\r\n  name: string;\r\n}\r\n\r\nexport interface ICoordinates {\r\n  latitude: number;\r\n  longitude: number;\r\n}\r\nexport interface IMarker {\r\n  isDraggable: boolean;\r\n  id: number;\r\n  coordinates: ICoordinates;\r\n  name: string;\r\n  type: MarkerType;\r\n}\r\n\r\nexport enum MarkerType {\r\n  Store,\r\n  User,\r\n  Time,\r\n  Distance,\r\n}\r\n\r\nexport interface gMapsServices {\r\n  maps: any;\r\n  autoCompleteService: any;\r\n  placesService: any;\r\n  directionService: any;\r\n  geoCoderService: any;\r\n  mapInitialLatLng?: any;\r\n}\r\n","import styled, { keyframes } from \"styled-components\";\r\nimport { MarkerType } from \"types/mapTypes\";\r\n\r\ninterface MarkerProps {\r\n  size: number;\r\n  hoover: boolean;\r\n  type: MarkerType;\r\n}\r\n\r\nconst breatheAnimation = keyframes`\r\n 0% {transform: scale(1)}\r\n 10% {transform: scale(0.8)}\r\n 50% {transform: scale(2)}\r\n 90% {transform: scale(0.8)}\r\n 100% {transform: scale(1)}\r\n`;\r\n\r\nconst MarkerPosCentered = styled.div<MarkerProps>`\r\n  position: absolute;\r\n  width: ${(props) => props.size || 1}rem;\r\n  height: ${(props) => props.size || 1}rem;\r\n  left: ${(props) => -props.size / 2 || 1}rem;\r\n  top: ${(props) => -props.size / 2 || 1}rem;\r\n\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n  text-align: center;\r\n  background: ${(props) => {\r\n    let color = \"palevioletred\";\r\n    if (props.type === MarkerType.Store) color = \"palegreen\";\r\n    if (props.type === MarkerType.Distance) color = \"gold\";\r\n    return color;\r\n  }};\r\n\r\n  animation-name: ${breatheAnimation};\r\n  animation-duration: 4s;\r\n  animation-iteration-count: ${(props) => (props.hoover ? \"infinite\" : \"none\")};\r\n  font-size: 16;\r\n  font-weight: bold;\r\n  padding: 4;\r\n  cursor: pointer;\r\n  svg {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst styles = {\r\n  MarkerPosCentered,\r\n};\r\n\r\nexport default styles;\r\n","import React from \"react\";\r\nimport {\r\n  HomeRounded,\r\n  StorefrontRounded,\r\n  MapRounded,\r\n  AlarmOnRounded,\r\n} from \"@material-ui/icons\";\r\nimport styles from \"./styled\";\r\nimport { MarkerType } from \"types/mapTypes\";\r\n\r\nconst MapMarker = (props) => {\r\n  return (\r\n    <styles.MarkerPosCentered\r\n      hoover={props.$hover}\r\n      size={2}\r\n      className=\"lookatme\"\r\n      type={props.type}\r\n    >\r\n      {props.type === MarkerType.User && <HomeRounded />}\r\n      {props.type === MarkerType.Store && <StorefrontRounded />}\r\n      {props.type === MarkerType.Distance && <MapRounded />}\r\n      {props.type === MarkerType.Time && <AlarmOnRounded />}\r\n    </styles.MarkerPosCentered>\r\n  );\r\n};\r\nexport default MapMarker;\r\n","import styled from \"styled-components\";\r\nconst Wrapper = styled.main`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport { Wrapper };\r\n","import React from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst API_KEY = process.env.REACT_APP_MAPS_API_KEY as string;\r\n\r\nconst GoogleMap = ({ children, ...props }) => (\r\n  <Wrapper>\r\n    <GoogleMapReact\r\n      bootstrapURLKeys={{\r\n        key: process.env.REACT_APP_MAP_KEY || API_KEY,\r\n        language: \"en\",\r\n        libraries: [\"places\", \"directions\"],\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </GoogleMapReact>\r\n  </Wrapper>\r\n);\r\n\r\nexport default GoogleMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MapMarker from \"components/mapMarker/mapMarker\";\r\nimport GoogleMap from \"components/googleMap/googleMap\";\r\nimport {\r\n  IMapCenter,\r\n  IMarker,\r\n  IGMapCoordinates,\r\n  gMapsServices,\r\n} from \"types/mapTypes\";\r\n\r\ninterface IMapWrapperProps {\r\n  userMarker: IMarker;\r\n  storesMarkers: Array<IMarker>;\r\n  onApiLoad: (gServices: gMapsServices) => void;\r\n  mapCenter: IMapCenter;\r\n  onMarkerMove: (location: IGMapCoordinates) => void;\r\n  zoom?: number;\r\n}\r\n\r\nconst MapWrapper: React.FC<IMapWrapperProps> = ({\r\n  userMarker,\r\n  storesMarkers,\r\n  onApiLoad,\r\n  mapCenter,\r\n  onMarkerMove,\r\n  zoom,\r\n}: IMapWrapperProps) => {\r\n  const [mapOptions, setmapOptions] = useState({\r\n    draggable: true,\r\n  });\r\n  const defaultZoom = 11;\r\n  const defaultHooverDistance = 50;\r\n  const [draggableMarker, setDraggableMarker] = useState<IMarker>(userMarker);\r\n\r\n  useEffect(() => {\r\n    setDraggableMarker(userMarker);\r\n    console.log(userMarker, storesMarkers);\r\n  }, [userMarker, storesMarkers]);\r\n\r\n  const onMarkerMoveStart = (childKey: any, childProps: any, mouse: any) => {\r\n    if (draggableMarker.id != childKey) {\r\n      return;\r\n    }\r\n    setmapOptions({\r\n      ...mapOptions,\r\n      draggable: false,\r\n    });\r\n    setDraggableMarker({\r\n      ...draggableMarker,\r\n      coordinates: {\r\n        latitude: mouse.lat,\r\n        longitude: mouse.lng,\r\n      },\r\n    });\r\n  };\r\n  const onMarkerRelease = (childKey: any, childProps: any, mouse: any) => {\r\n    setmapOptions({ ...mapOptions, draggable: true });\r\n    onMarkerMove({\r\n      lat: mouse.lat,\r\n      lng: mouse.lng,\r\n    });\r\n  };\r\n\r\n  const onChange = ({ center, zoom }) => {};\r\n\r\n  const onChildMouseEnter = (key, childProps) => {};\r\n\r\n  const onChildMouseLeave = (key, childProps) => {};\r\n\r\n  const onClick = (value) => {};\r\n\r\n  const distanceToMouse = (markerPos, mousePos, markerProps) => {\r\n    const x = markerPos.x;\r\n    const y = markerPos.y;\r\n    return Math.sqrt(\r\n      (x - mousePos.x) * (x - mousePos.x) + (y - mousePos.y) * (y - mousePos.y)\r\n    );\r\n  };\r\n\r\n  const apiHasLoaded = ({ map, maps, ref }) => {\r\n    onApiLoad({\r\n      maps,\r\n      autoCompleteService: new maps.places.AutocompleteService(),\r\n      placesService: new maps.places.PlacesService(map),\r\n      directionService: new maps.DirectionsService(),\r\n      geoCoderService: new maps.Geocoder(),\r\n    });\r\n  };\r\n\r\n  const Markers =\r\n    draggableMarker &&\r\n    storesMarkers &&\r\n    [\r\n      draggableMarker,\r\n      ...storesMarkers,\r\n    ].map((marker: IMarker, index: number) => (\r\n      <MapMarker\r\n        key={index}\r\n        lat={marker.coordinates.latitude}\r\n        lng={marker.coordinates.longitude}\r\n        type={marker.type}\r\n        onClick={onClick}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <GoogleMap\r\n      center={mapCenter.center}\r\n      defaultZoom={zoom ? zoom : defaultZoom}\r\n      yesIWantToUseGoogleMapApiInternals={true}\r\n      onGoogleApiLoaded={apiHasLoaded}\r\n      onChildMouseEnter={onChildMouseEnter}\r\n      onChildMouseLeave={onChildMouseLeave}\r\n      onClick={onClick}\r\n      draggable={mapOptions.draggable}\r\n      onChange={onChange}\r\n      onChildMouseDown={onMarkerMoveStart}\r\n      onChildMouseUp={onMarkerRelease}\r\n      onChildMouseMove={onMarkerMoveStart}\r\n      hoverDistance={defaultHooverDistance}\r\n      distanceToMouse={distanceToMouse}\r\n    >\r\n      {Markers}\r\n    </GoogleMap>\r\n  );\r\n};\r\n\r\nexport default MapWrapper;\r\n","import styled from \"styled-components\";\r\nimport {\r\n  TextField as MTextField,\r\n  InputAdornment as MInputAdornment,\r\n  Button as MButton,\r\n  Switch as MSwitch,\r\n  FormControlLabel as MFormControlLabel,\r\n} from \"@material-ui/core\";\r\n\r\nexport const TextField = styled(MTextField)``;\r\nexport const InputAdornment = styled(MInputAdornment)``;\r\nexport const FormControlLabel = styled(MFormControlLabel)``;\r\nexport const Switch = styled(MSwitch)``;\r\nexport const Button = styled(MButton)`\r\n  background: palevioletred;\r\n`;\r\n\r\nconst AutoCompleteFieldWraper = styled.div``;\r\nconst PanelContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  max-height: 100vh;\r\n  width: 100%;\r\n`;\r\nconst HelperLabel = styled.h1`\r\n  font-size: 1.5rem;\r\n  color: palevioletred;\r\n  text-align: left;\r\n`;\r\n\r\nconst OptionsPanel = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 450px;\r\n  overflow-y: scroll;\r\n  padding: 4rem 0rem;\r\n  ${TextField} {\r\n    margin: 1rem 2.5rem;\r\n  }\r\n  ${Button} {\r\n    margin: 2.5rem 2.5rem;\r\n    max-width: 12rem;\r\n    background: palevioletred;\r\n  }\r\n  ${InputAdornment} {\r\n    color: palevioletred;\r\n  }\r\n  ${HelperLabel} {\r\n    padding: 0 3rem;\r\n  }\r\n\r\n  h3 {\r\n    margin: 0 4rem;\r\n    color: palevioletred;\r\n    font-size: 1.2rem;\r\n    text-align: left;\r\n  }\r\n  ${FormControlLabel} {\r\n    margin: 1.5rem 4rem 1rem 4rem;\r\n    color: palevioletred;\r\n  }\r\n`;\r\n\r\nconst Board = styled.div`\r\n  flex-direction: column;\r\n  min-width: 250px;\r\n  flex-grow: 1;\r\n  width: auto;\r\n  overflow-y: scroll;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 4rem 4rem;\r\n  ${AutoCompleteFieldWraper} {\r\n    margin: 1rem 2.5rem;\r\n  }\r\n  ${Button} {\r\n    background: palevioletred;\r\n  }\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 1.5rem;\r\n  text-align: center;\r\n  color: palevioletred;\r\n  background: peachpuff;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst MapContainer = styled.div`\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  align-items: stretch;\r\n  height: 32rem;\r\n  margin: 4rem 2rem;\r\n  /* decorations */\r\n  border-radius: 41px 41px 41px 41px;\r\n  -moz-border-radius: 41px 41px 41px 41px;\r\n  -webkit-border-radius: 41px 41px 41px 41px;\r\n  border: 3px solid palevioletred;\r\n  -webkit-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  -moz-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  background: white;\r\n  margin: 5rem auto;\r\n  height: 20rem;\r\n  width: 35rem;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  /* //decoration */\r\n  border-radius: 41px 41px 41px 41px;\r\n  -moz-border-radius: 41px 41px 41px 41px;\r\n  -webkit-border-radius: 41px 41px 41px 41px;\r\n  border: 3px solid palevioletred;\r\n  -webkit-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  -moz-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\r\n  overflow: hidden;\r\n  h2 {\r\n    max-width: 25rem;\r\n    color: palevioletred;\r\n    font-weight: 600;\r\n    font-size: 1.6rem;\r\n  }\r\n  h3 {\r\n    max-width: 25rem;\r\n    font-size: 1.2rem;\r\n  }\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst styles = {\r\n  Title,\r\n  OptionsPanel,\r\n  PanelContainer,\r\n  Board,\r\n  TextField,\r\n  MapContainer,\r\n  AutoCompleteFieldWraper,\r\n  HelperLabel,\r\n  ModalContent,\r\n};\r\n\r\nexport default styles;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  IMapCenter,\r\n  IMarker,\r\n  MarkerType,\r\n  IGMapCoordinates,\r\n  gMapsServices,\r\n} from \"types/mapTypes\";\r\nimport { IDestination } from \"types/destinationTypes\";\r\nimport Map from \"components/mapWrapper/mapWrapper\";\r\nimport styles, { Button } from \"./styled\";\r\nimport { IStore } from \"types/storeTypes\";\r\nimport { TextFieldsFormHelper, LocalizationFindersHelper } from \"./formHelper\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nexport interface IHomeViewProps {\r\n  destination: IDestination;\r\n  nearest: IStore | undefined;\r\n  storesList: Array<IStore>;\r\n  mapServices: gMapsServices;\r\n  onApiLoad: (gServices: gMapsServices) => void;\r\n  getAllStoresInCity: (city: string) => void;\r\n  onDestinationSubmit: (destination: IDestination) => void;\r\n  locationLoaded: boolean;\r\n}\r\n\r\nexport enum AutoFieldType {\r\n  CENTER = \"Center\",\r\n  ADDRESS = \"Address\",\r\n}\r\n\r\nconst HomeView = ({\r\n  nearest,\r\n  destination,\r\n  storesList,\r\n  mapServices,\r\n  onApiLoad,\r\n  locationLoaded,\r\n  onDestinationSubmit,\r\n  getAllStoresInCity,\r\n}: IHomeViewProps) => {\r\n  const [mapCenter, setMapCenter] = useState<IMapCenter>({\r\n    center: { lat: 0, lng: 0 },\r\n    name: \"\",\r\n  });\r\n  const [destMarkPost, setDestMarkPost] = useState<IMarker>({\r\n    isDraggable: true,\r\n    id: 0,\r\n    coordinates: {\r\n      latitude: destination.latitude,\r\n      longitude: destination.longitude,\r\n    },\r\n    name: destination.name,\r\n    type: MarkerType.User,\r\n  });\r\n  const [storeMarkPos, setStoreMarkPos] = useState<IMarker[]>([]);\r\n  const [destinationObj, setDestinationObj] = useState<IDestination>(\r\n    destination\r\n  );\r\n  const [addressValue, setAddressValue] = useState(\"\");\r\n  const [openModal, setOpenModal] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mapServices && mapServices.mapInitialLatLng) {\r\n      const center = {\r\n        lat: mapServices.mapInitialLatLng.lat(),\r\n        lng: mapServices.mapInitialLatLng.lng(),\r\n      };\r\n      let name = \"\";\r\n      if (locationLoaded) {\r\n        setDestinationMarker(center);\r\n        mapServices.geoCoderService.geocode(\r\n          { location: center },\r\n          (response) => {\r\n            name = response[0].formatted_address.split(\",\").slice(1).toString();\r\n            setMapCenter({\r\n              center,\r\n              name,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      setMapCenter({\r\n        center,\r\n        name,\r\n      });\r\n    }\r\n  }, [mapServices, locationLoaded]);\r\n\r\n  useEffect(() => {\r\n    const storesMarkers: IMarker[] =\r\n      storesList &&\r\n      storesList.map((store) => ({\r\n        isDraggable: false,\r\n        id: store.id,\r\n        coordinates: {\r\n          latitude: store.latitude,\r\n          longitude: store.longitude,\r\n        },\r\n        name: store.name,\r\n        type: MarkerType.Store,\r\n      }));\r\n\r\n    const nearestMarker: IMarker | undefined = nearest && {\r\n      isDraggable: false,\r\n      id: nearest.id,\r\n      coordinates: {\r\n        latitude: nearest.latitude,\r\n        longitude: nearest.longitude,\r\n      },\r\n      name: nearest.name,\r\n      type: MarkerType.Distance, // only suported for the back now\r\n    };\r\n\r\n    if (nearestMarker) storesMarkers.push(nearestMarker);\r\n    setStoreMarkPos(storesMarkers);\r\n  }, [storesList, nearest]);\r\n\r\n  useEffect(() => {\r\n    const destMarker = {\r\n      isDraggable: true,\r\n      id: 0,\r\n      coordinates: {\r\n        latitude: destination.latitude,\r\n        longitude: destination.longitude,\r\n      },\r\n      name: destination.name,\r\n      type: MarkerType.User,\r\n    };\r\n    setDestMarkPost(destMarker);\r\n  }, [destination]);\r\n\r\n  const fillDestinationObj = (geoCodeRespose) => {\r\n    const filterbyType = (type_tag: string) => {\r\n      const value = geoCodeRespose.address_components.filter((part) =>\r\n        part.types.includes(type_tag)\r\n      );\r\n      return value.length > 0 ? value[0].long_name : \"\";\r\n    };\r\n\r\n    let destination = {\r\n      zip_code: filterbyType(\"postal_code\"),\r\n      country: filterbyType(\"country\"),\r\n      city: filterbyType(\"locality\"),\r\n      state: filterbyType(\"administrative_area_level_1\"),\r\n      address: geoCodeRespose.formatted_address.split(\",\")[0],\r\n      latitude: geoCodeRespose.geometry.location.lat(),\r\n      longitude: geoCodeRespose.geometry.location.lng(),\r\n    };\r\n\r\n    setDestinationObj({ ...destinationObj, ...destination });\r\n    setAddressValue(geoCodeRespose.formatted_address);\r\n    setMapCenter({\r\n      ...mapCenter,\r\n      name: geoCodeRespose.formatted_address.split(\",\").slice(1).toString(),\r\n    });\r\n  };\r\n\r\n  const onCenterFieldSelection = (key: string, option: string) => {\r\n    if (!mapServices.geoCoderService) {\r\n      return undefined;\r\n    }\r\n    const searchQuery = {\r\n      address: option,\r\n    };\r\n    mapServices.geoCoderService.geocode(searchQuery, (response) => {\r\n      const { location } = response[0].geometry;\r\n      const center = {\r\n        lat: location.lat(),\r\n        lng: location.lng(),\r\n      };\r\n      if (key === AutoFieldType.CENTER) {\r\n        setMapCenter({\r\n          ...mapCenter,\r\n          center,\r\n          name: option,\r\n        });\r\n      }\r\n\r\n      if (key === AutoFieldType.ADDRESS) {\r\n        fillDestinationObj(response[0]);\r\n      }\r\n\r\n      setDestinationMarker(center);\r\n    });\r\n  };\r\n\r\n  const onAutoCompleFieldOnTyping = async (\r\n    key: string,\r\n    value: string,\r\n    callback: (options: Array<string>) => void\r\n  ): Promise<Array<string> | undefined> => {\r\n    if (!mapServices.maps || !mapServices.autoCompleteService) {\r\n      return undefined;\r\n    }\r\n    let searchQuery: any = {\r\n      input: value,\r\n    };\r\n\r\n    if (key === AutoFieldType.CENTER) {\r\n      searchQuery = {\r\n        ...searchQuery,\r\n        fields: [\"name\"],\r\n      };\r\n    }\r\n\r\n    if (key === AutoFieldType.ADDRESS) {\r\n      searchQuery = {\r\n        ...searchQuery,\r\n        location: new mapServices.maps.LatLng(\r\n          mapCenter.center.lat,\r\n          mapCenter.center.lng\r\n        ),\r\n        radius: 30000,\r\n        types: [\"establishment\", \"street_address\", \"street_number\", \"route\"],\r\n      };\r\n    }\r\n\r\n    mapServices.autoCompleteService.getQueryPredictions(\r\n      searchQuery,\r\n      (response) => {\r\n        if (response) {\r\n          const dataSource: Array<string> = response.map(\r\n            (resp) => resp.description\r\n          );\r\n          callback(dataSource);\r\n          return dataSource;\r\n        }\r\n      }\r\n    );\r\n\r\n    return undefined;\r\n  };\r\n\r\n  const setDestinationMarker = (location: IGMapCoordinates) => {\r\n    if (!destMarkPost) {\r\n      return;\r\n    }\r\n    setDestMarkPost({\r\n      ...destMarkPost,\r\n      coordinates: {\r\n        latitude: location.lat,\r\n        longitude: location.lng,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onMarkerMove = (location: IGMapCoordinates) => {\r\n    mapServices.geoCoderService.geocode({ location }, (response) => {\r\n      fillDestinationObj(response[0]);\r\n    });\r\n  };\r\n\r\n  const onTextFieldValueChange = (field: string) => (event) => {\r\n    setDestinationObj({\r\n      ...destinationObj,\r\n      [field]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const textFieldsForm = () => {\r\n    //Moved this to another file for being too long\r\n    return (\r\n      <TextFieldsFormHelper\r\n        addressValue={addressValue}\r\n        destinationObj={destinationObj}\r\n        onTextFieldValueChange={onTextFieldValueChange}\r\n        submitForm={submitForm}\r\n      ></TextFieldsFormHelper>\r\n    );\r\n  };\r\n\r\n  const localizationFinders = () => {\r\n    //Moved this to another file for being too long\r\n    return (\r\n      <LocalizationFindersHelper\r\n        addressValue={addressValue}\r\n        locationLoaded={locationLoaded}\r\n        mapCenter={mapCenter}\r\n        onAutoCompleFieldOnTyping={onAutoCompleFieldOnTyping}\r\n        onCenterFieldSelection={onCenterFieldSelection}\r\n      ></LocalizationFindersHelper>\r\n    );\r\n  };\r\n\r\n  const validateDestination = (destination: IDestination) => {\r\n    const ignoreKeys = [\"address_two\", \"description\"];\r\n    let valid = true;\r\n    for (let key in destination) {\r\n      valid =\r\n        valid && (ignoreKeys.includes(key) ? true : destination[key] !== \"\");\r\n    }\r\n    return valid;\r\n  };\r\n\r\n  const submitForm = (event) => {\r\n    const isValid = validateDestination(destinationObj);\r\n    if (!isValid) {\r\n      setOpenModal(!isValid);\r\n      return;\r\n    }\r\n    onDestinationSubmit(destinationObj);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <styles.Title>@Go Nuts!@</styles.Title>\r\n      <styles.PanelContainer>\r\n        <styles.OptionsPanel>{textFieldsForm()}</styles.OptionsPanel>\r\n        <styles.Board>\r\n          {localizationFinders()}\r\n          <styles.MapContainer>\r\n            <Map\r\n              userMarker={destMarkPost}\r\n              storesMarkers={storeMarkPos}\r\n              onApiLoad={onApiLoad}\r\n              mapCenter={mapCenter}\r\n              onMarkerMove={onMarkerMove}\r\n            ></Map>\r\n          </styles.MapContainer>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => getAllStoresInCity(mapCenter.name.split(\",\")[0])}\r\n          >\r\n            Show me stores in this city\r\n          </Button>\r\n        </styles.Board>\r\n      </styles.PanelContainer>\r\n      <Modal open={openModal} onClose={() => setOpenModal(false)}>\r\n        <styles.ModalContent>\r\n          <h2>Ooops... Something did breake</h2>\r\n          <h3>Destination information is not valid, please check the fields</h3>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => setOpenModal(false)}\r\n          >\r\n            sure, i will!\r\n          </Button>\r\n        </styles.ModalContent>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default HomeView;\r\n","/* eslint-disable no-use-before-define */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\ninterface IAutoCompleteFieldProps {\r\n  id: string;\r\n  value: string;\r\n  label: string;\r\n  onTyping?: (\r\n    key: string,\r\n    value: string,\r\n    callback: (options: Array<string>) => void\r\n  ) => Promise<Array<string> | undefined>;\r\n  onSelection?: (key: string, option: string) => void;\r\n}\r\n\r\nconst AutoCompleteField: React.FC<IAutoCompleteFieldProps> = (\r\n  props: IAutoCompleteFieldProps\r\n) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n  const [options, setOptions] = useState<Array<string>>([]);\r\n\r\n  const populteOptions = async (options) => {\r\n    setOptions(options);\r\n  };\r\n\r\n  useEffect(() => {}, [props]);\r\n\r\n  useEffect(() => {\r\n    if (!(inputValue.length > 0)) {\r\n      return undefined;\r\n    }\r\n    if (props.onTyping && typeof props.onTyping == \"function\") {\r\n      let populatedOptions = props.onTyping(\r\n        props.id,\r\n        inputValue,\r\n        populteOptions\r\n      );\r\n      if (!populatedOptions) populteOptions([]);\r\n    }\r\n  }, [inputValue]);\r\n\r\n  useEffect(() => {\r\n    if (!selectedValue || !(selectedValue.length > 0)) {\r\n      return undefined;\r\n    }\r\n    if (props.onSelection) props.onSelection(props.id, selectedValue);\r\n  }, [selectedValue]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id={`autoCompleteField-${props.id}`}\r\n      filterOptions={(x) => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      getOptionLabel={(option) => option}\r\n      value={props.value}\r\n      onChange={(event: any, newValue: any) => {\r\n        setSelectedValue(newValue);\r\n      }}\r\n      onClose={(event: any) => {\r\n        setOptions([]);\r\n      }}\r\n      onInputChange={(event: any, newInputValue: any) => {\r\n        setInputValue(newInputValue);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField {...params} label={props.label} variant=\"outlined\" />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AutoCompleteField;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Send,\r\n  DynamicFeed,\r\n  AddAlert,\r\n  Apartment,\r\n  Public,\r\n  LineStyle,\r\n  LocationCity,\r\n  Dialpad,\r\n  EditLocation,\r\n} from \"@material-ui/icons\";\r\nimport styles, {\r\n  TextField,\r\n  Button,\r\n  InputAdornment,\r\n  Switch,\r\n  FormControlLabel,\r\n} from \"./styled\";\r\nimport AutoCompleteField from \"components/autoComplete/autoComplete\";\r\nimport { AutoFieldType } from \"./HomeView\";\r\n\r\nexport const TextFieldsFormHelper = (props) => {\r\n  const [checkedB, setCheckedB] = useState(false);\r\n\r\n  const handleSwitch = (event: React.ChangeEvent<{}>, checked: boolean) => {\r\n    setCheckedB(checked);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <styles.HelperLabel>\r\n        Complete this information so we can find the Store you need!\r\n      </styles.HelperLabel>\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        value={props.destinationObj.name}\r\n        onChange={props.onTextFieldValueChange(\"name\")}\r\n        label={\"Name This Destination\"}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <DynamicFeed />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\r\n        helperText=\"This can't be empty\"\r\n        placeholder={\"The name of your place. i.e. The Batcave\"}\r\n      />\r\n\r\n      <TextField\r\n        label={\"Add DesCription\"}\r\n        value={props.destinationObj.description}\r\n        onChange={props.onTextFieldValueChange(\"description\")}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <AddAlert />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        placeholder={\"Instructions for delivery. i.e. `bark three times`\"}\r\n      />\r\n\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        value={props.destinationObj.address}\r\n        onChange={props.onTextFieldValueChange(\"address\")}\r\n        label={\"Address\"}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <EditLocation />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\r\n        helperText=\"This can't be empty\"\r\n      />\r\n\r\n      <TextField\r\n        label={\"Address Two\"}\r\n        value={props.destinationObj.address_two}\r\n        onChange={props.onTextFieldValueChange(\"address_two\")}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <Apartment />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        placeholder={\"Aditional info,i.e. building, apto, secret door etc.\"}\r\n      />\r\n\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        label={\"Country\"}\r\n        onChange={props.onTextFieldValueChange(\"country\")}\r\n        value={props.destinationObj.country}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <Public />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\r\n        helperText=\"This can't be empty\"\r\n      />\r\n\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        value={props.destinationObj.state}\r\n        onChange={props.onTextFieldValueChange(\"state\")}\r\n        label={\"State\"}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <LineStyle />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={props.addressValue !== \"\" && props.destinationObj.state === \"\"}\r\n        helperText=\"This can't be empty\"\r\n      />\r\n\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        value={props.destinationObj.city}\r\n        onChange={props.onTextFieldValueChange(\"city\")}\r\n        label={\"City\"}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <LocationCity />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\r\n        helperText=\"This can't be empty\"\r\n      />\r\n\r\n      <TextField\r\n        autoComplete=\"off\"\r\n        value={props.destinationObj.zip_code}\r\n        onChange={props.onTextFieldValueChange(\"zip_code\")}\r\n        label={\"Zip Code\"}\r\n        variant=\"outlined\"\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <Dialpad />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        required\r\n        error={\r\n          props.addressValue !== \"\" && props.destinationObj.zip_code === \"\"\r\n        }\r\n        helperText=\"This can't be empty\"\r\n      />\r\n\r\n      <styles.HelperLabel>\r\n        Are you done? there are a few filters you can apply\r\n      </styles.HelperLabel>\r\n\r\n      <h3>Man, is midnight and partying</h3>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={checkedB}\r\n            onChange={handleSwitch}\r\n            name=\"checkedB\"\r\n            color=\"secondary\"\r\n          />\r\n        }\r\n        label=\"Look for Open Stores\"\r\n      />\r\n      <h3>Just on the toilet, kind of an urgency</h3>\r\n\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={checkedB}\r\n            onChange={handleSwitch}\r\n            name=\"checkedB\"\r\n            color=\"secondary\"\r\n          />\r\n        }\r\n        label=\"I want it Quickly\"\r\n      />\r\n      <h3>A pretty domiciliary girl?</h3>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={checkedB}\r\n            onChange={handleSwitch}\r\n            name=\"checkedB\"\r\n            color=\"secondary\"\r\n          />\r\n        }\r\n        label=\"I want it Near\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        endIcon={<Send />}\r\n        onClick={props.submitForm}\r\n      >\r\n        Find It!\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const LocalizationFindersHelper = (props: any) => {\r\n  let {\r\n    addressValue,\r\n    locationLoaded,\r\n    mapCenter,\r\n    onAutoCompleFieldOnTyping,\r\n    onCenterFieldSelection,\r\n  } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <styles.AutoCompleteFieldWraper>\r\n        {!locationLoaded && (\r\n          <styles.HelperLabel>\r\n            Since we were unable to activate your Geolocation, let's find the\r\n            city or town where you are located.\r\n          </styles.HelperLabel>\r\n        )}\r\n        {locationLoaded && (\r\n          <styles.HelperLabel>\r\n            Alright! looks like you're somewhere near {mapCenter.name}, move the\r\n            marker in the map to find your address, or you can type it here.\r\n          </styles.HelperLabel>\r\n        )}\r\n\r\n        <AutoCompleteField\r\n          id={AutoFieldType.CENTER}\r\n          label={\"NearBy Place or City\"}\r\n          value={mapCenter ? mapCenter.name : \"\"}\r\n          onTyping={onAutoCompleFieldOnTyping}\r\n          onSelection={onCenterFieldSelection}\r\n        ></AutoCompleteField>\r\n      </styles.AutoCompleteFieldWraper>\r\n      <styles.AutoCompleteFieldWraper>\r\n        <styles.HelperLabel>\r\n          You can type your address to locate you, look for the hints if you're\r\n          really lost!\r\n        </styles.HelperLabel>\r\n        <AutoCompleteField\r\n          id={AutoFieldType.ADDRESS}\r\n          label={\"Address\"}\r\n          value={addressValue}\r\n          onTyping={onAutoCompleFieldOnTyping}\r\n          onSelection={onCenterFieldSelection}\r\n        ></AutoCompleteField>\r\n      </styles.AutoCompleteFieldWraper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export interface IDestination {\r\n  name: string;\r\n  address: string;\r\n  address_two: string;\r\n  description: string;\r\n  country: string;\r\n  city: string;\r\n  state: string;\r\n  zip_code: string;\r\n  latitude: number;\r\n  longitude: number;\r\n}\r\n\r\nexport interface IOrderItem {\r\n  name: string;\r\n  quantity: number;\r\n}\r\nexport enum SearchNearestBy {\r\n  distance,\r\n  time,\r\n}\r\nexport interface IFilter {\r\n  searchBy: SearchNearestBy;\r\n  searchOpen: boolean;\r\n}\r\nexport interface IDestinationDetails {\r\n  destination: IDestination;\r\n  items?: Array<IOrderItem>;\r\n  filters: IFilter;\r\n  error: Error | null;\r\n}\r\nexport interface APIDestinationResponse {\r\n  results: IDestination;\r\n  info: string;\r\n  error: string;\r\n}\r\n","import { IStore, ISToreState } from \"types/storeTypes\";\r\n\r\nexport const initialState: ISToreState = {\r\n  error: null,\r\n  cityStores: [\r\n    // {\r\n    //   id: 25,\r\n    //   name: \"the house\",\r\n    //   is_open: true,\r\n    //   latitude: 4.5995892,\r\n    //   longitude: -74.084578999999,\r\n    //   nextDeliveryTime: 60,\r\n    //   address: \"hello avenue\",\r\n    //   city: \"Bogota\",\r\n    //   country: \"Colombia\",\r\n    //   state: \"Bogota\",\r\n    // },\r\n  ],\r\n  nearest: {\r\n    distance: undefined,\r\n    // {\r\n    //   id: 25,\r\n    //   name: \"the house\",\r\n    //   is_open: true,\r\n    //   latitude: 4.590884099999999,\r\n    //   longitude: -74.1160183,\r\n    //   nextDeliveryTime: 60,\r\n    //   address: \"hello avenue\",\r\n    //   city: \"Bogota\",\r\n    //   country: \"Colombia\",\r\n    //   state: \"Bogota\",\r\n    // },\r\n    time: undefined,\r\n  },\r\n};\r\n","import axios, { AxiosRequestConfig } from \"axios\";\r\n\r\nimport { IStore, APIStoreResponse } from \"types/storeTypes\";\r\nimport { IDestinationDetails } from \"types/destinationTypes\";\r\n\r\nconst serviceEndpoint = process.env.REACT_APP_API_URL as string;\r\nconst storesURI = process.env.REACT_APP_API_STORES_URI as string;\r\n\r\nexport async function getNearestStore(destination: IDestinationDetails) {\r\n  const endpoint = \"/nearest\";\r\n  const url = `${serviceEndpoint}${storesURI}${endpoint}`;\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    params: {\r\n      searchBy: destination.filters.searchBy,\r\n      hi: true,\r\n    },\r\n  };\r\n  const data: IDestinationDetails = destination;\r\n  let response = await axios.post<APIStoreResponse>(url, data, config);\r\n  console.log(`Nearest post from axios: \", ${(await response).data}`);\r\n  return (await response).data;\r\n}\r\n\r\nexport async function getStoresInCity(city: string) {\r\n  const url = `${serviceEndpoint}${storesURI}/city/${city}`;\r\n  const config: AxiosRequestConfig = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  let response = await axios.get<APIStoreResponse>(url, config);\r\n  console.log(`get from axios: \", ${(await response).data}`);\r\n  return (await response).data;\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState, store } from \"redux/store\";\r\n\r\nimport { initialState } from \"./storesInitialstate\";\r\nimport { IStore, APIStoreResponse } from \"types/storeTypes\";\r\nimport { IDestination, IDestinationDetails } from \"types/destinationTypes\";\r\nimport { getNearestStore, getStoresInCity } from \"api/storeAPI\";\r\n\r\nexport const storesSlice = createSlice({\r\n  name: \"stores\",\r\n  initialState,\r\n  reducers: {\r\n    setStoresByCity(state, action: PayloadAction<IStore[]>) {\r\n      state.cityStores = action.payload;\r\n    },\r\n    setStoresNearestTime(state, action: PayloadAction<IStore>) {\r\n      state.nearest.time = action.payload;\r\n    },\r\n    setStoresNearestDistance(state, action: PayloadAction<IStore>) {\r\n      state.nearest.distance = action.payload;\r\n    },\r\n    addStoreToCity(state, action: PayloadAction<IStore>) {\r\n      let stores = state.cityStores || ([] as IStore[]);\r\n      stores.push(action.payload);\r\n    },\r\n    somethingFailed(state, action: PayloadAction<Error>) {\r\n      state.error = action.payload;\r\n      console.info(\"redux state not modified\");\r\n    },\r\n    failingAcknowledgement(state) {\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setStoresByCity,\r\n  setStoresNearestTime,\r\n  setStoresNearestDistance,\r\n  addStoreToCity,\r\n  somethingFailed,\r\n  failingAcknowledgement,\r\n} = storesSlice.actions;\r\n\r\nexport const nearestStore = (destination: IDestination): AppThunk => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    let { filters, items } = getState().destination;\r\n\r\n    let destDetails: IDestinationDetails = {\r\n      destination,\r\n      filters,\r\n      items,\r\n      error: null,\r\n    };\r\n    let nearest: APIStoreResponse = await getNearestStore(destDetails);\r\n\r\n    dispatch(setStoresNearestDistance(nearest.results[0]));\r\n    dispatch(failingAcknowledgement());\r\n  } catch (err) {\r\n    console.error(`No calls were made ${err}`);\r\n    dispatch(somethingFailed(err));\r\n  }\r\n};\r\n\r\nexport const storeByCity = (city: string): AppThunk => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    let stores: APIStoreResponse = await getStoresInCity(city);\r\n\r\n    dispatch(setStoresByCity(stores.results));\r\n    dispatch(failingAcknowledgement());\r\n  } catch (err) {\r\n    console.error(`No calls were made ${err}`);\r\n    dispatch(somethingFailed(err));\r\n  }\r\n};\r\n\r\nexport const selectDestination = (state: RootState) => state.destination;\r\n\r\nexport default storesSlice.reducer;\r\n","import { IDestinationDetails, SearchNearestBy } from \"types/destinationTypes\";\r\n\r\nexport const initialState: IDestinationDetails = {\r\n  error: null,\r\n  destination: {\r\n    name: \"\",\r\n    address: \"\",\r\n    address_two: \"\",\r\n    description: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n    zip_code: \"\",\r\n    state: \"\",\r\n    latitude: 4.690884099999999,\r\n    longitude: -74.860183,\r\n  },\r\n  filters: {\r\n    searchBy: SearchNearestBy.distance,\r\n    searchOpen: false,\r\n  },\r\n  items: [\r\n    {\r\n      name: \"beer\",\r\n      quantity: 6,\r\n    },\r\n  ],\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"redux/store\";\r\nimport { IDestination, IFilter, IOrderItem } from \"types/destinationTypes\";\r\n\r\nimport { initialState } from \"./destinationInitialstate\";\r\n\r\nexport const destinationSlice = createSlice({\r\n  name: \"destination\",\r\n  initialState,\r\n  reducers: {\r\n    setDestination: (state, action: PayloadAction<IDestination>) => {\r\n      state.destination = action.payload;\r\n    },\r\n    setFilters: (state, action: PayloadAction<IFilter>) => {\r\n      state.filters = action.payload;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    addItemToOrder: (state, action: PayloadAction<IOrderItem>) => {\r\n      let items = state.items || [];\r\n      let alreadyThere = items.findIndex(\r\n        (elem) => elem.name === action.payload.name\r\n      );\r\n      state.items =\r\n        alreadyThere >= 0\r\n          ? [\r\n              ...items.slice(0, alreadyThere),\r\n              action.payload,\r\n              ...items.slice(alreadyThere),\r\n            ]\r\n          : [...items, action.payload];\r\n    },\r\n    deleteItemFromOrder: (state, action: PayloadAction<IOrderItem>) => {\r\n      let items = state.items || [];\r\n      let alreadyThere = items.findIndex(\r\n        (elem) => elem.name === action.payload.name\r\n      );\r\n      state.items =\r\n        alreadyThere >= 0\r\n          ? [...items.slice(0, alreadyThere), ...items.slice(alreadyThere + 1)]\r\n          : state.items;\r\n    },\r\n    somethingFailed(state, action: PayloadAction<Error>) {\r\n      state.error = action.payload;\r\n      console.info(\"redux state not modified\");\r\n    },\r\n    failingAcknowledgement(state) {\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setDestination,\r\n  setFilters,\r\n  addItemToOrder,\r\n  deleteItemFromOrder,\r\n  somethingFailed,\r\n  failingAcknowledgement,\r\n} = destinationSlice.actions;\r\n\r\nexport const sentDestinationToApi = (destination: IDestination): AppThunk => (\r\n  dispatch\r\n) => {\r\n  try {\r\n    dispatch(setDestination(destination));\r\n    dispatch(failingAcknowledgement());\r\n  } catch (err) {\r\n    console.error(`No calls were made ${err}`);\r\n    dispatch(somethingFailed(err));\r\n  }\r\n};\r\n\r\nexport const selectDestination = (state: RootState) => state.destination;\r\n\r\nexport default destinationSlice.reducer;\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport HomeView from \"./HomeView\";\r\nimport { IDestination, SearchNearestBy } from \"types/destinationTypes\";\r\nimport { RootState } from \"redux/store\";\r\nimport { IStore } from \"types/storeTypes\";\r\nimport { nearestStore, storeByCity } from \"redux/ducks/stores/storesSlice\";\r\nimport { sentDestinationToApi } from \"redux/ducks/destination/destinationSlice\";\r\n\r\ninterface IHomeProps {}\r\n\r\nconst HomeContainer = ({}: IHomeProps) => {\r\n  const defaultCenter = { lat: 1.3521, lng: 103.8198 };\r\n  const dispatch = useDispatch();\r\n  const destination: IDestination = useSelector(\r\n    (state: RootState) => state.destination.destination\r\n  );\r\n  const stores: Array<IStore> =\r\n    useSelector((state: RootState) => state.stores.cityStores) || [];\r\n\r\n  const nearest: IStore | undefined = useSelector((state: RootState) =>\r\n    state.destination.filters.searchBy === SearchNearestBy.distance\r\n      ? state.stores.nearest.distance\r\n      : state.stores.nearest.time\r\n  );\r\n\r\n  const [mapServices, setMapServices] = useState<any>({});\r\n  const [locationLoaded, setLocationLoaded] = useState(false);\r\n\r\n  const setGMapsServices = (gServices: any) => {\r\n    let center = new gServices.maps.LatLng(\r\n      defaultCenter.lat,\r\n      defaultCenter.lng\r\n    );\r\n\r\n    //This one could be dalayed but is not a promise, so setState inside again\r\n    if (navigator && navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (pos) => {\r\n          const coords = pos.coords;\r\n          center = new gServices.maps.LatLng(coords.latitude, coords.longitude);\r\n          setMapServices({ ...gServices, mapInitialLatLng: center });\r\n          setLocationLoaded(true);\r\n        },\r\n        (error) => {\r\n          console.error(\"Cant Get Position\", error);\r\n        }\r\n      );\r\n    }\r\n    setMapServices({ ...gServices, mapInitialLatLng: center });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"the new map service is\", mapServices);\r\n  }, [mapServices]);\r\n\r\n  const onDestinationSubmit = (destination: IDestination) => {\r\n    console.log(\"the submit is, \", destination);\r\n    dispatch(sentDestinationToApi(destination));\r\n    dispatch(nearestStore(destination));\r\n  };\r\n\r\n  const getAllStoresInCity = (city: string) => {\r\n    if (city === undefined || city === \"\") {\r\n      return;\r\n    }\r\n    dispatch(storeByCity(city));\r\n  };\r\n\r\n  return (\r\n    <HomeView\r\n      onApiLoad={setGMapsServices}\r\n      nearest={nearest}\r\n      mapServices={mapServices}\r\n      destination={destination}\r\n      storesList={stores || []}\r\n      onDestinationSubmit={onDestinationSubmit}\r\n      locationLoaded={locationLoaded}\r\n      getAllStoresInCity={getAllStoresInCity}\r\n    ></HomeView>\r\n  );\r\n};\r\n\r\nexport default HomeContainer;\r\n","export const theme = {\r\n  main: \"mediumseagreen\",\r\n};\r\n","import React from \"react\";\r\nimport Home from \"containers/home\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"themes/theme\";\r\nimport \"./App.css\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <Home></Home>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport destinationReducer from \"./ducks/destination/destinationSlice\";\r\nimport storesReducer from \"./ducks/stores/storesSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: destinationReducer,\r\n    destination: destinationReducer,\r\n    stores: storesReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App/App\";\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./utils/serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}