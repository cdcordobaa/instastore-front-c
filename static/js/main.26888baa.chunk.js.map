{"version":3,"sources":["types/mapTypes.ts","components/mapMarker/styled.ts","components/mapMarker/mapMarker.tsx","components/googleMap/styled.ts","components/googleMap/googleMap.tsx","components/mapWrapper/mapWrapper.tsx","containers/home/styled.ts","containers/home/HomeView.tsx","components/autoComplete/autoComplete.tsx","containers/home/formHelper.tsx","types/destinationTypes.ts","redux/ducks/stores/storesInitialstate.ts","api/storeAPI.ts","redux/ducks/stores/storesSlice.ts","redux/ducks/destination/destinationInitialstate.ts","redux/ducks/destination/destinationSlice.ts","containers/home/index.ts","containers/home/HomeContainer.tsx","themes/theme.ts","App/App.tsx","redux/store.ts","utils/serviceWorker.ts","index.tsx"],"names":["MarkerType","breatheAnimation","keyframes","styles","MarkerPosCentered","styled","div","props","size","color","type","Store","Distance","hoover","MapMarker","$hover","className","User","HomeRounded","StorefrontRounded","MapRounded","Time","AlarmOnRounded","Wrapper","main","GoogleMap","process","REACT_APP_MAPS_API_KEY","children","bootstrapURLKeys","key","language","libraries","MapWrapper","userMarker","storesMarkers","onApiLoad","mapCenter","onMarkerMove","zoom","useState","draggable","mapOptions","setmapOptions","draggableMarker","setDraggableMarker","useEffect","console","log","onMarkerMoveStart","childKey","childProps","mouse","id","coordinates","latitude","lat","longitude","lng","onClick","value","Markers","map","marker","index","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","ref","autoCompleteService","places","AutocompleteService","placesService","PlacesService","directionService","DirectionsService","geoCoderService","Geocoder","onChildMouseEnter","onChildMouseLeave","onChange","onChildMouseDown","onChildMouseUp","onChildMouseMove","hoverDistance","distanceToMouse","markerPos","mousePos","markerProps","x","y","Math","sqrt","AutoFieldType","TextField","MTextField","InputAdornment","MInputAdornment","FormControlLabel","MFormControlLabel","Switch","MSwitch","Button","MButton","AutoCompleteFieldWraper","PanelContainer","HelperLabel","h1","OptionsPanel","Board","Title","MapContainer","ModalContent","AutoCompleteField","inputValue","setInputValue","selectedValue","setSelectedValue","options","setOptions","populteOptions","a","length","onTyping","onSelection","Autocomplete","filterOptions","autoComplete","includeInputInList","filterSelectedOptions","getOptionLabel","option","event","newValue","onClose","onInputChange","newInputValue","renderInput","params","label","variant","TextFieldsFormHelper","checkedB","setCheckedB","handleSwitch","checked","Fragment","destinationObj","name","onTextFieldValueChange","InputProps","startAdornment","position","DynamicFeed","required","error","addressValue","city","helperText","placeholder","description","AddAlert","address","EditLocation","address_two","Apartment","country","Public","state","LineStyle","LocationCity","zip_code","Dialpad","control","endIcon","Send","submitForm","LocalizationFindersHelper","locationLoaded","onAutoCompleFieldOnTyping","onCenterFieldSelection","CENTER","ADDRESS","SearchNearestBy","HomeView","nearest","destination","storesList","mapServices","onDestinationSubmit","getAllStoresInCity","setMapCenter","isDraggable","destMarkPost","setDestMarkPost","storeMarkPos","setStoreMarkPos","setDestinationObj","setAddressValue","React","openModal","setOpenModal","mapInitialLatLng","setDestinationMarker","geocode","location","response","formatted_address","split","slice","toString","store","nearestMarker","push","destMarker","fillDestinationObj","geoCodeRespose","filterbyType","type_tag","address_components","filter","part","types","includes","long_name","geometry","searchQuery","callback","undefined","input","fields","LatLng","radius","getQueryPredictions","dataSource","resp","field","target","isValid","ignoreKeys","valid","validateDestination","Modal","open","initialState","cityStores","distance","time","serviceEndpoint","getNearestStore","url","config","headers","searchBy","filters","hi","data","axios","post","getStoresInCity","get","storesSlice","createSlice","reducers","setStoresByCity","action","payload","setStoresNearestTime","setStoresNearestDistance","addStoreToCity","somethingFailed","info","failingAcknowledgement","actions","searchOpen","items","quantity","destinationSlice","setDestination","setFilters","addItemToOrder","alreadyThere","findIndex","elem","deleteItemFromOrder","HomeContainer","defaultCenter","dispatch","useDispatch","useSelector","stores","setMapServices","setLocationLoaded","gServices","navigator","geolocation","getCurrentPosition","pos","coords","err","sentDestinationToApi","getState","destDetails","results","nearestStore","storeByCity","theme","App","configureStore","reducer","user","destinationReducer","storesReducer","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26888baa.chunk.js","sourcesContent":["export interface IGMapCoordinates {\n  lat: number;\n  lng: number;\n}\nexport interface IMapCenter {\n  center: IGMapCoordinates;\n  name: string;\n}\n\nexport interface ICoordinates {\n  latitude: number;\n  longitude: number;\n}\nexport interface IMarker {\n  isDraggable: boolean;\n  id: number;\n  coordinates: ICoordinates;\n  name: string;\n  type: MarkerType;\n}\n\nexport enum MarkerType {\n  Store,\n  User,\n  Time,\n  Distance,\n}\n\nexport interface gMapsServices {\n  maps: any;\n  autoCompleteService: any;\n  placesService: any;\n  directionService: any;\n  geoCoderService: any;\n  mapInitialLatLng?: any;\n}\n","import styled, { keyframes } from \"styled-components\";\nimport { MarkerType } from \"types/mapTypes\";\n\ninterface MarkerProps {\n  size: number;\n  hoover: boolean;\n  type: MarkerType;\n}\n\nconst breatheAnimation = keyframes`\n 0% {transform: scale(1)}\n 10% {transform: scale(0.8)}\n 50% {transform: scale(2)}\n 90% {transform: scale(0.8)}\n 100% {transform: scale(1)}\n`;\n\nconst MarkerPosCentered = styled.div<MarkerProps>`\n  position: absolute;\n  width: ${(props) => props.size || 1}rem;\n  height: ${(props) => props.size || 1}rem;\n  left: ${(props) => -props.size / 2 || 1}rem;\n  top: ${(props) => -props.size / 2 || 1}rem;\n\n  border: 1px solid black;\n  border-radius: 50%;\n  text-align: center;\n  background: ${(props) => {\n    let color = \"palevioletred\";\n    if (props.type === MarkerType.Store) color = \"palegreen\";\n    if (props.type === MarkerType.Distance) color = \"gold\";\n    return color;\n  }};\n\n  animation-name: ${breatheAnimation};\n  animation-duration: 4s;\n  animation-iteration-count: ${(props) => (props.hoover ? \"infinite\" : \"none\")};\n  font-size: 16;\n  font-weight: bold;\n  padding: 4;\n  cursor: pointer;\n  svg {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst styles = {\n  MarkerPosCentered,\n};\n\nexport default styles;\n","import React from \"react\";\nimport {\n  HomeRounded,\n  StorefrontRounded,\n  MapRounded,\n  AlarmOnRounded,\n} from \"@material-ui/icons\";\nimport styles from \"./styled\";\nimport { MarkerType } from \"types/mapTypes\";\n\nconst MapMarker = (props) => {\n  return (\n    <styles.MarkerPosCentered\n      hoover={props.$hover}\n      size={2}\n      className=\"lookatme\"\n      type={props.type}\n    >\n      {props.type === MarkerType.User && <HomeRounded />}\n      {props.type === MarkerType.Store && <StorefrontRounded />}\n      {props.type === MarkerType.Distance && <MapRounded />}\n      {props.type === MarkerType.Time && <AlarmOnRounded />}\n    </styles.MarkerPosCentered>\n  );\n};\nexport default MapMarker;\n","import styled from \"styled-components\";\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport { Wrapper };\n","import React from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport { Wrapper } from \"./styled\";\n\nconst API_KEY = process.env.REACT_APP_MAPS_API_KEY as string;\n\nconst GoogleMap = ({ children, ...props }) => (\n  <Wrapper>\n    <GoogleMapReact\n      bootstrapURLKeys={{\n        key: process.env.REACT_APP_MAP_KEY || API_KEY,\n        language: \"en\",\n        libraries: [\"places\", \"directions\"],\n      }}\n      {...props}\n    >\n      {children}\n    </GoogleMapReact>\n  </Wrapper>\n);\n\nexport default GoogleMap;\n","import React, { useState, useEffect } from \"react\";\nimport MapMarker from \"components/mapMarker/mapMarker\";\nimport GoogleMap from \"components/googleMap/googleMap\";\nimport {\n  IMapCenter,\n  IMarker,\n  IGMapCoordinates,\n  gMapsServices,\n} from \"types/mapTypes\";\n\ninterface IMapWrapperProps {\n  userMarker: IMarker;\n  storesMarkers: Array<IMarker>;\n  onApiLoad: (gServices: gMapsServices) => void;\n  mapCenter: IMapCenter;\n  onMarkerMove: (location: IGMapCoordinates) => void;\n  zoom?: number;\n}\n\nconst MapWrapper: React.FC<IMapWrapperProps> = ({\n  userMarker,\n  storesMarkers,\n  onApiLoad,\n  mapCenter,\n  onMarkerMove,\n  zoom,\n}: IMapWrapperProps) => {\n  const [mapOptions, setmapOptions] = useState({\n    draggable: true,\n  });\n  const defaultZoom = 11;\n  const defaultHooverDistance = 50;\n  const [draggableMarker, setDraggableMarker] = useState<IMarker>(userMarker);\n\n  useEffect(() => {\n    setDraggableMarker(userMarker);\n    console.log(userMarker, storesMarkers);\n  }, [userMarker, storesMarkers]);\n\n  const onMarkerMoveStart = (childKey: any, childProps: any, mouse: any) => {\n    if (draggableMarker.id != childKey) {\n      return;\n    }\n    setmapOptions({\n      ...mapOptions,\n      draggable: false,\n    });\n    setDraggableMarker({\n      ...draggableMarker,\n      coordinates: {\n        latitude: mouse.lat,\n        longitude: mouse.lng,\n      },\n    });\n  };\n  const onMarkerRelease = (childKey: any, childProps: any, mouse: any) => {\n    setmapOptions({ ...mapOptions, draggable: true });\n    onMarkerMove({\n      lat: mouse.lat,\n      lng: mouse.lng,\n    });\n  };\n\n  const onChange = ({ center, zoom }) => {};\n\n  const onChildMouseEnter = (key, childProps) => {};\n\n  const onChildMouseLeave = (key, childProps) => {};\n\n  const onClick = (value) => {};\n\n  const distanceToMouse = (markerPos, mousePos, markerProps) => {\n    const x = markerPos.x;\n    const y = markerPos.y;\n    return Math.sqrt(\n      (x - mousePos.x) * (x - mousePos.x) + (y - mousePos.y) * (y - mousePos.y)\n    );\n  };\n\n  const apiHasLoaded = ({ map, maps, ref }) => {\n    onApiLoad({\n      maps,\n      autoCompleteService: new maps.places.AutocompleteService(),\n      placesService: new maps.places.PlacesService(map),\n      directionService: new maps.DirectionsService(),\n      geoCoderService: new maps.Geocoder(),\n    });\n  };\n\n  const Markers =\n    draggableMarker &&\n    storesMarkers &&\n    [\n      draggableMarker,\n      ...storesMarkers,\n    ].map((marker: IMarker, index: number) => (\n      <MapMarker\n        key={index}\n        lat={marker.coordinates.latitude}\n        lng={marker.coordinates.longitude}\n        type={marker.type}\n        onClick={onClick}\n      />\n    ));\n\n  return (\n    <GoogleMap\n      center={mapCenter.center}\n      defaultZoom={zoom ? zoom : defaultZoom}\n      yesIWantToUseGoogleMapApiInternals={true}\n      onGoogleApiLoaded={apiHasLoaded}\n      onChildMouseEnter={onChildMouseEnter}\n      onChildMouseLeave={onChildMouseLeave}\n      onClick={onClick}\n      draggable={mapOptions.draggable}\n      onChange={onChange}\n      onChildMouseDown={onMarkerMoveStart}\n      onChildMouseUp={onMarkerRelease}\n      onChildMouseMove={onMarkerMoveStart}\n      hoverDistance={defaultHooverDistance}\n      distanceToMouse={distanceToMouse}\n    >\n      {Markers}\n    </GoogleMap>\n  );\n};\n\nexport default MapWrapper;\n","import styled from \"styled-components\";\nimport {\n  TextField as MTextField,\n  InputAdornment as MInputAdornment,\n  Button as MButton,\n  Switch as MSwitch,\n  FormControlLabel as MFormControlLabel,\n} from \"@material-ui/core\";\n\nexport const TextField = styled(MTextField)``;\nexport const InputAdornment = styled(MInputAdornment)``;\nexport const FormControlLabel = styled(MFormControlLabel)``;\nexport const Switch = styled(MSwitch)``;\nexport const Button = styled(MButton)`\n  background: palevioletred;\n`;\n\nconst AutoCompleteFieldWraper = styled.div``;\nconst PanelContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  max-height: 100vh;\n  width: 100%;\n`;\nconst HelperLabel = styled.h1`\n  font-size: 1.5rem;\n  color: palevioletred;\n  text-align: left;\n`;\n\nconst OptionsPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 450px;\n  overflow-y: scroll;\n  padding: 4rem 0rem;\n  ${TextField} {\n    margin: 1rem 2.5rem;\n  }\n  ${Button} {\n    margin: 2.5rem 2.5rem;\n    max-width: 12rem;\n    background: palevioletred;\n  }\n  ${InputAdornment} {\n    color: palevioletred;\n  }\n  ${HelperLabel} {\n    padding: 0 3rem;\n  }\n\n  h3 {\n    margin: 0 4rem;\n    color: palevioletred;\n    font-size: 1.2rem;\n    text-align: left;\n  }\n  ${FormControlLabel} {\n    margin: 1.5rem 4rem 1rem 4rem;\n    color: palevioletred;\n  }\n`;\n\nconst Board = styled.div`\n  flex-direction: column;\n  min-width: 250px;\n  flex-grow: 1;\n  width: auto;\n  overflow-y: scroll;\n  justify-content: center;\n  align-items: center;\n  padding: 4rem 4rem;\n  ${AutoCompleteFieldWraper} {\n    margin: 1rem 2.5rem;\n  }\n  ${Button} {\n    background: palevioletred;\n  }\n`;\nconst Title = styled.h1`\n  font-size: 1.5rem;\n  text-align: center;\n  color: palevioletred;\n  background: peachpuff;\n  margin: 0;\n  padding: 0;\n`;\n\nconst MapContainer = styled.div`\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: stretch;\n  height: 32rem;\n  margin: 4rem 2rem;\n  /* decorations */\n  border-radius: 41px 41px 41px 41px;\n  -moz-border-radius: 41px 41px 41px 41px;\n  -webkit-border-radius: 41px 41px 41px 41px;\n  border: 3px solid palevioletred;\n  -webkit-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  -moz-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  overflow: hidden;\n`;\n\nconst ModalContent = styled.div`\n  display: flex;\n  background: white;\n  margin: 5rem auto;\n  height: 20rem;\n  width: 35rem;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  /* //decoration */\n  border-radius: 41px 41px 41px 41px;\n  -moz-border-radius: 41px 41px 41px 41px;\n  -webkit-border-radius: 41px 41px 41px 41px;\n  border: 3px solid palevioletred;\n  -webkit-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  -moz-box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  box-shadow: 0px 40px 30px 15px rgba(0, 0, 0, 0.52);\n  overflow: hidden;\n  h2 {\n    max-width: 25rem;\n    color: palevioletred;\n    font-weight: 600;\n    font-size: 1.6rem;\n  }\n  h3 {\n    max-width: 25rem;\n    font-size: 1.2rem;\n  }\n  :focus {\n    outline: none;\n  }\n`;\n\nconst styles = {\n  Title,\n  OptionsPanel,\n  PanelContainer,\n  Board,\n  TextField,\n  MapContainer,\n  AutoCompleteFieldWraper,\n  HelperLabel,\n  ModalContent,\n};\n\nexport default styles;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  IMapCenter,\n  IMarker,\n  MarkerType,\n  IGMapCoordinates,\n  gMapsServices,\n} from \"types/mapTypes\";\nimport { IDestination } from \"types/destinationTypes\";\nimport Map from \"components/mapWrapper/mapWrapper\";\nimport styles, { Button } from \"./styled\";\nimport { IStore } from \"types/storeTypes\";\nimport { TextFieldsFormHelper, LocalizationFindersHelper } from \"./formHelper\";\nimport { Modal } from \"@material-ui/core\";\n\nexport interface IHomeViewProps {\n  destination: IDestination;\n  nearest: IStore | undefined;\n  storesList: Array<IStore>;\n  mapServices: gMapsServices;\n  onApiLoad: (gServices: gMapsServices) => void;\n  getAllStoresInCity: (city: string) => void;\n  onDestinationSubmit: (destination: IDestination) => void;\n  locationLoaded: boolean;\n}\n\nexport enum AutoFieldType {\n  CENTER = \"Center\",\n  ADDRESS = \"Address\",\n}\n\nconst HomeView = ({\n  nearest,\n  destination,\n  storesList,\n  mapServices,\n  onApiLoad,\n  locationLoaded,\n  onDestinationSubmit,\n  getAllStoresInCity,\n}: IHomeViewProps) => {\n  const [mapCenter, setMapCenter] = useState<IMapCenter>({\n    center: { lat: 0, lng: 0 },\n    name: \"\",\n  });\n  const [destMarkPost, setDestMarkPost] = useState<IMarker>({\n    isDraggable: true,\n    id: 0,\n    coordinates: {\n      latitude: destination.latitude,\n      longitude: destination.longitude,\n    },\n    name: destination.name,\n    type: MarkerType.User,\n  });\n  const [storeMarkPos, setStoreMarkPos] = useState<IMarker[]>([]);\n  const [destinationObj, setDestinationObj] = useState<IDestination>(\n    destination\n  );\n  const [addressValue, setAddressValue] = useState(\"\");\n  const [openModal, setOpenModal] = React.useState(false);\n\n  useEffect(() => {\n    if (mapServices && mapServices.mapInitialLatLng) {\n      const center = {\n        lat: mapServices.mapInitialLatLng.lat(),\n        lng: mapServices.mapInitialLatLng.lng(),\n      };\n      let name = \"\";\n      if (locationLoaded) {\n        setDestinationMarker(center);\n        mapServices.geoCoderService.geocode(\n          { location: center },\n          (response) => {\n            name = response[0].formatted_address.split(\",\").slice(1).toString();\n            setMapCenter({\n              center,\n              name,\n            });\n          }\n        );\n      }\n      setMapCenter({\n        center,\n        name,\n      });\n    }\n  }, [mapServices, locationLoaded]);\n\n  useEffect(() => {\n    const storesMarkers: IMarker[] =\n      storesList &&\n      storesList.map((store) => ({\n        isDraggable: false,\n        id: store.id,\n        coordinates: {\n          latitude: store.latitude,\n          longitude: store.longitude,\n        },\n        name: store.name,\n        type: MarkerType.Store,\n      }));\n\n    const nearestMarker: IMarker | undefined = nearest && {\n      isDraggable: false,\n      id: nearest.id,\n      coordinates: {\n        latitude: nearest.latitude,\n        longitude: nearest.longitude,\n      },\n      name: nearest.name,\n      type: MarkerType.Distance, // only suported for the back now\n    };\n\n    if (nearestMarker) storesMarkers.push(nearestMarker);\n    setStoreMarkPos(storesMarkers);\n  }, [storesList, nearest]);\n\n  useEffect(() => {\n    const destMarker = {\n      isDraggable: true,\n      id: 0,\n      coordinates: {\n        latitude: destination.latitude,\n        longitude: destination.longitude,\n      },\n      name: destination.name,\n      type: MarkerType.User,\n    };\n    setDestMarkPost(destMarker);\n  }, [destination]);\n\n  const fillDestinationObj = (geoCodeRespose) => {\n    const filterbyType = (type_tag: string) => {\n      const value = geoCodeRespose.address_components.filter((part) =>\n        part.types.includes(type_tag)\n      );\n      return value.length > 0 ? value[0].long_name : \"\";\n    };\n\n    let destination = {\n      zip_code: filterbyType(\"postal_code\"),\n      country: filterbyType(\"country\"),\n      city: filterbyType(\"locality\"),\n      state: filterbyType(\"administrative_area_level_1\"),\n      address: geoCodeRespose.formatted_address.split(\",\")[0],\n      latitude: geoCodeRespose.geometry.location.lat(),\n      longitude: geoCodeRespose.geometry.location.lng(),\n    };\n\n    setDestinationObj({ ...destinationObj, ...destination });\n    setAddressValue(geoCodeRespose.formatted_address);\n    setMapCenter({\n      ...mapCenter,\n      name: geoCodeRespose.formatted_address.split(\",\").slice(1).toString(),\n    });\n  };\n\n  const onCenterFieldSelection = (key: string, option: string) => {\n    if (!mapServices.geoCoderService) {\n      return undefined;\n    }\n    const searchQuery = {\n      address: option,\n    };\n    mapServices.geoCoderService.geocode(searchQuery, (response) => {\n      const { location } = response[0].geometry;\n      const center = {\n        lat: location.lat(),\n        lng: location.lng(),\n      };\n      if (key === AutoFieldType.CENTER) {\n        setMapCenter({\n          ...mapCenter,\n          center,\n          name: option,\n        });\n      }\n\n      if (key === AutoFieldType.ADDRESS) {\n        fillDestinationObj(response[0]);\n      }\n\n      setDestinationMarker(center);\n    });\n  };\n\n  const onAutoCompleFieldOnTyping = async (\n    key: string,\n    value: string,\n    callback: (options: Array<string>) => void\n  ): Promise<Array<string> | undefined> => {\n    if (!mapServices.maps || !mapServices.autoCompleteService) {\n      return undefined;\n    }\n    let searchQuery: any = {\n      input: value,\n    };\n\n    if (key === AutoFieldType.CENTER) {\n      searchQuery = {\n        ...searchQuery,\n        fields: [\"name\"],\n      };\n    }\n\n    if (key === AutoFieldType.ADDRESS) {\n      searchQuery = {\n        ...searchQuery,\n        location: new mapServices.maps.LatLng(\n          mapCenter.center.lat,\n          mapCenter.center.lng\n        ),\n        radius: 30000,\n        types: [\"establishment\", \"street_address\", \"street_number\", \"route\"],\n      };\n    }\n\n    mapServices.autoCompleteService.getQueryPredictions(\n      searchQuery,\n      (response) => {\n        if (response) {\n          const dataSource: Array<string> = response.map(\n            (resp) => resp.description\n          );\n          callback(dataSource);\n          return dataSource;\n        }\n      }\n    );\n\n    return undefined;\n  };\n\n  const setDestinationMarker = (location: IGMapCoordinates) => {\n    if (!destMarkPost) {\n      return;\n    }\n    setDestMarkPost({\n      ...destMarkPost,\n      coordinates: {\n        latitude: location.lat,\n        longitude: location.lng,\n      },\n    });\n  };\n\n  const onMarkerMove = (location: IGMapCoordinates) => {\n    mapServices.geoCoderService.geocode({ location }, (response) => {\n      fillDestinationObj(response[0]);\n    });\n  };\n\n  const onTextFieldValueChange = (field: string) => (event) => {\n    setDestinationObj({\n      ...destinationObj,\n      [field]: event.target.value,\n    });\n  };\n\n  const textFieldsForm = () => {\n    //Moved this to another file for being too long\n    return (\n      <TextFieldsFormHelper\n        addressValue={addressValue}\n        destinationObj={destinationObj}\n        onTextFieldValueChange={onTextFieldValueChange}\n        submitForm={submitForm}\n      ></TextFieldsFormHelper>\n    );\n  };\n\n  const localizationFinders = () => {\n    //Moved this to another file for being too long\n    return (\n      <LocalizationFindersHelper\n        addressValue={addressValue}\n        locationLoaded={locationLoaded}\n        mapCenter={mapCenter}\n        onAutoCompleFieldOnTyping={onAutoCompleFieldOnTyping}\n        onCenterFieldSelection={onCenterFieldSelection}\n      ></LocalizationFindersHelper>\n    );\n  };\n\n  const validateDestination = (destination: IDestination) => {\n    const ignoreKeys = [\"address_two\", \"description\"];\n    let valid = true;\n    for (let key in destination) {\n      valid =\n        valid && (ignoreKeys.includes(key) ? true : destination[key] !== \"\");\n    }\n    return valid;\n  };\n\n  const submitForm = (event) => {\n    const isValid = validateDestination(destinationObj);\n    if (!isValid) {\n      setOpenModal(!isValid);\n      return;\n    }\n    onDestinationSubmit(destinationObj);\n  };\n\n  return (\n    <React.Fragment>\n      <styles.Title>@Go Nuts!@</styles.Title>\n      <styles.PanelContainer>\n        <styles.OptionsPanel>{textFieldsForm()}</styles.OptionsPanel>\n        <styles.Board>\n          {localizationFinders()}\n          <styles.MapContainer>\n            <Map\n              userMarker={destMarkPost}\n              storesMarkers={storeMarkPos}\n              onApiLoad={onApiLoad}\n              mapCenter={mapCenter}\n              onMarkerMove={onMarkerMove}\n            ></Map>\n          </styles.MapContainer>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => getAllStoresInCity(mapCenter.name.split(\",\")[0])}\n          >\n            Show me stores in this city\n          </Button>\n        </styles.Board>\n      </styles.PanelContainer>\n      <Modal open={openModal} onClose={() => setOpenModal(false)}>\n        <styles.ModalContent>\n          <h2>Ooops... Something did breake</h2>\n          <h3>Destination information is not valid, please check the fields</h3>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => setOpenModal(false)}\n          >\n            sure, i will!\n          </Button>\n        </styles.ModalContent>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default HomeView;\n","/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\ninterface IAutoCompleteFieldProps {\n  id: string;\n  value: string;\n  label: string;\n  onTyping?: (\n    key: string,\n    value: string,\n    callback: (options: Array<string>) => void\n  ) => Promise<Array<string> | undefined>;\n  onSelection?: (key: string, option: string) => void;\n}\n\nconst AutoCompleteField: React.FC<IAutoCompleteFieldProps> = (\n  props: IAutoCompleteFieldProps\n) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedValue, setSelectedValue] = useState(\"\");\n  const [options, setOptions] = useState<Array<string>>([]);\n\n  const populteOptions = async (options) => {\n    setOptions(options);\n  };\n\n  useEffect(() => {}, [props]);\n\n  useEffect(() => {\n    if (!(inputValue.length > 0)) {\n      return undefined;\n    }\n    if (props.onTyping && typeof props.onTyping == \"function\") {\n      let populatedOptions = props.onTyping(\n        props.id,\n        inputValue,\n        populteOptions\n      );\n      if (!populatedOptions) populteOptions([]);\n    }\n  }, [inputValue]);\n\n  useEffect(() => {\n    if (!selectedValue || !(selectedValue.length > 0)) {\n      return undefined;\n    }\n    if (props.onSelection) props.onSelection(props.id, selectedValue);\n  }, [selectedValue]);\n\n  return (\n    <Autocomplete\n      id={`autoCompleteField-${props.id}`}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      getOptionLabel={(option) => option}\n      value={props.value}\n      onChange={(event: any, newValue: any) => {\n        setSelectedValue(newValue);\n      }}\n      onClose={(event: any) => {\n        setOptions([]);\n      }}\n      onInputChange={(event: any, newInputValue: any) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField {...params} label={props.label} variant=\"outlined\" />\n      )}\n    />\n  );\n};\n\nexport default AutoCompleteField;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Send,\n  DynamicFeed,\n  AddAlert,\n  Apartment,\n  Public,\n  LineStyle,\n  LocationCity,\n  Dialpad,\n  EditLocation,\n} from \"@material-ui/icons\";\nimport styles, {\n  TextField,\n  Button,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n} from \"./styled\";\nimport AutoCompleteField from \"components/autoComplete/autoComplete\";\nimport { AutoFieldType } from \"./HomeView\";\n\nexport const TextFieldsFormHelper = (props) => {\n  const [checkedB, setCheckedB] = useState(false);\n\n  const handleSwitch = (event: React.ChangeEvent<{}>, checked: boolean) => {\n    setCheckedB(checked);\n  };\n\n  return (\n    <React.Fragment>\n      <styles.HelperLabel>\n        Complete this information so we can find the Store you need!\n      </styles.HelperLabel>\n      <TextField\n        autoComplete=\"off\"\n        value={props.destinationObj.name}\n        onChange={props.onTextFieldValueChange(\"name\")}\n        label={\"Name This Destination\"}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <DynamicFeed />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\n        helperText=\"This can't be empty\"\n        placeholder={\"The name of your place. i.e. The Batcave\"}\n      />\n\n      <TextField\n        label={\"Add DesCription\"}\n        value={props.destinationObj.description}\n        onChange={props.onTextFieldValueChange(\"description\")}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <AddAlert />\n            </InputAdornment>\n          ),\n        }}\n        placeholder={\"Instructions for delivery. i.e. `bark three times`\"}\n      />\n\n      <TextField\n        autoComplete=\"off\"\n        value={props.destinationObj.address}\n        onChange={props.onTextFieldValueChange(\"address\")}\n        label={\"Address\"}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <EditLocation />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\n        helperText=\"This can't be empty\"\n      />\n\n      <TextField\n        label={\"Address Two\"}\n        value={props.destinationObj.address_two}\n        onChange={props.onTextFieldValueChange(\"address_two\")}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Apartment />\n            </InputAdornment>\n          ),\n        }}\n        placeholder={\"Aditional info,i.e. building, apto, secret door etc.\"}\n      />\n\n      <TextField\n        autoComplete=\"off\"\n        label={\"Country\"}\n        onChange={props.onTextFieldValueChange(\"country\")}\n        value={props.destinationObj.country}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Public />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\n        helperText=\"This can't be empty\"\n      />\n\n      <TextField\n        autoComplete=\"off\"\n        value={props.destinationObj.state}\n        onChange={props.onTextFieldValueChange(\"state\")}\n        label={\"State\"}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <LineStyle />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={props.addressValue !== \"\" && props.destinationObj.state === \"\"}\n        helperText=\"This can't be empty\"\n      />\n\n      <TextField\n        autoComplete=\"off\"\n        value={props.destinationObj.city}\n        onChange={props.onTextFieldValueChange(\"city\")}\n        label={\"City\"}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <LocationCity />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={props.addressValue !== \"\" && props.destinationObj.city === \"\"}\n        helperText=\"This can't be empty\"\n      />\n\n      <TextField\n        autoComplete=\"off\"\n        value={props.destinationObj.zip_code}\n        onChange={props.onTextFieldValueChange(\"zip_code\")}\n        label={\"Zip Code\"}\n        variant=\"outlined\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Dialpad />\n            </InputAdornment>\n          ),\n        }}\n        required\n        error={\n          props.addressValue !== \"\" && props.destinationObj.zip_code === \"\"\n        }\n        helperText=\"This can't be empty\"\n      />\n\n      <styles.HelperLabel>\n        Are you done? there are a few filters you can apply\n      </styles.HelperLabel>\n\n      <h3>Man, is midnight and partying</h3>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={checkedB}\n            onChange={handleSwitch}\n            name=\"checkedB\"\n            color=\"secondary\"\n          />\n        }\n        label=\"Look for Open Stores\"\n      />\n      <h3>Just on the toilet, kind of an urgency</h3>\n\n      <FormControlLabel\n        control={\n          <Switch\n            checked={checkedB}\n            onChange={handleSwitch}\n            name=\"checkedB\"\n            color=\"secondary\"\n          />\n        }\n        label=\"I want it Quickly\"\n      />\n      <h3>A pretty domiciliary girl?</h3>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={checkedB}\n            onChange={handleSwitch}\n            name=\"checkedB\"\n            color=\"secondary\"\n          />\n        }\n        label=\"I want it Near\"\n      />\n\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        endIcon={<Send />}\n        onClick={props.submitForm}\n      >\n        Find It!\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport const LocalizationFindersHelper = (props: any) => {\n  let {\n    addressValue,\n    locationLoaded,\n    mapCenter,\n    onAutoCompleFieldOnTyping,\n    onCenterFieldSelection,\n  } = props;\n  return (\n    <React.Fragment>\n      <styles.AutoCompleteFieldWraper>\n        {!locationLoaded && (\n          <styles.HelperLabel>\n            Since we were unable to activate your Geolocation, let's find the\n            city or town where you are located.\n          </styles.HelperLabel>\n        )}\n        {locationLoaded && (\n          <styles.HelperLabel>\n            Alright! looks like you're somewhere near {mapCenter.name}, move the\n            marker in the map to find your address, or you can type it here.\n          </styles.HelperLabel>\n        )}\n\n        <AutoCompleteField\n          id={AutoFieldType.CENTER}\n          label={\"NearBy Place or City\"}\n          value={mapCenter ? mapCenter.name : \"\"}\n          onTyping={onAutoCompleFieldOnTyping}\n          onSelection={onCenterFieldSelection}\n        ></AutoCompleteField>\n      </styles.AutoCompleteFieldWraper>\n      <styles.AutoCompleteFieldWraper>\n        <styles.HelperLabel>\n          You can type your address to locate you, look for the hints if you're\n          really lost!\n        </styles.HelperLabel>\n        <AutoCompleteField\n          id={AutoFieldType.ADDRESS}\n          label={\"Address\"}\n          value={addressValue}\n          onTyping={onAutoCompleFieldOnTyping}\n          onSelection={onCenterFieldSelection}\n        ></AutoCompleteField>\n      </styles.AutoCompleteFieldWraper>\n    </React.Fragment>\n  );\n};\n","export interface IDestination {\n  name: string;\n  address: string;\n  address_two: string;\n  description: string;\n  country: string;\n  city: string;\n  state: string;\n  zip_code: string;\n  latitude: number;\n  longitude: number;\n}\n\nexport interface IOrderItem {\n  name: string;\n  quantity: number;\n}\nexport enum SearchNearestBy {\n  distance,\n  time,\n}\nexport interface IFilter {\n  searchBy: SearchNearestBy;\n  searchOpen: boolean;\n}\nexport interface IDestinationDetails {\n  destination: IDestination;\n  items?: Array<IOrderItem>;\n  filters: IFilter;\n  error: Error | null;\n}\nexport interface APIDestinationResponse {\n  results: IDestination;\n  info: string;\n  error: string;\n}\n","import { IStore, ISToreState } from \"types/storeTypes\";\n\nexport const initialState: ISToreState = {\n  error: null,\n  cityStores: [\n    // {\n    //   id: 25,\n    //   name: \"the house\",\n    //   is_open: true,\n    //   latitude: 4.5995892,\n    //   longitude: -74.084578999999,\n    //   nextDeliveryTime: 60,\n    //   address: \"hello avenue\",\n    //   city: \"Bogota\",\n    //   country: \"Colombia\",\n    //   state: \"Bogota\",\n    // },\n  ],\n  nearest: {\n    distance: undefined,\n    // {\n    //   id: 25,\n    //   name: \"the house\",\n    //   is_open: true,\n    //   latitude: 4.590884099999999,\n    //   longitude: -74.1160183,\n    //   nextDeliveryTime: 60,\n    //   address: \"hello avenue\",\n    //   city: \"Bogota\",\n    //   country: \"Colombia\",\n    //   state: \"Bogota\",\n    // },\n    time: undefined,\n  },\n};\n","import axios, { AxiosRequestConfig } from \"axios\";\n\nimport { IStore, APIStoreResponse } from \"types/storeTypes\";\nimport { IDestinationDetails } from \"types/destinationTypes\";\n\nconst serviceEndpoint = process.env.REACT_APP_API_URL as string;\nconst storesURI = process.env.REACT_APP_API_STORES_URI as string;\n\nexport async function getNearestStore(destination: IDestinationDetails) {\n  const endpoint = \"/nearest\";\n  const url = `${serviceEndpoint}${storesURI}${endpoint}`;\n  const config: AxiosRequestConfig = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    params: {\n      searchBy: destination.filters.searchBy,\n      hi: true,\n    },\n  };\n  const data: IDestinationDetails = destination;\n  let response = await axios.post<APIStoreResponse>(url, data, config);\n  console.log(`Nearest post from axios: \", ${(await response).data}`);\n  return (await response).data;\n}\n\nexport async function getStoresInCity(city: string) {\n  const url = `${serviceEndpoint}${storesURI}/city/${city}`;\n  const config: AxiosRequestConfig = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  let response = await axios.get<APIStoreResponse>(url, config);\n  console.log(`get from axios: \", ${(await response).data}`);\n  return (await response).data;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState, store } from \"redux/store\";\n\nimport { initialState } from \"./storesInitialstate\";\nimport { IStore, APIStoreResponse } from \"types/storeTypes\";\nimport { IDestination, IDestinationDetails } from \"types/destinationTypes\";\nimport { getNearestStore, getStoresInCity } from \"api/storeAPI\";\n\nexport const storesSlice = createSlice({\n  name: \"stores\",\n  initialState,\n  reducers: {\n    setStoresByCity(state, action: PayloadAction<IStore[]>) {\n      state.cityStores = action.payload;\n    },\n    setStoresNearestTime(state, action: PayloadAction<IStore>) {\n      state.nearest.time = action.payload;\n    },\n    setStoresNearestDistance(state, action: PayloadAction<IStore>) {\n      state.nearest.distance = action.payload;\n    },\n    addStoreToCity(state, action: PayloadAction<IStore>) {\n      let stores = state.cityStores || ([] as IStore[]);\n      stores.push(action.payload);\n    },\n    somethingFailed(state, action: PayloadAction<Error>) {\n      state.error = action.payload;\n      console.info(\"redux state not modified\");\n    },\n    failingAcknowledgement(state) {\n      state.error = null;\n    },\n  },\n});\n\nexport const {\n  setStoresByCity,\n  setStoresNearestTime,\n  setStoresNearestDistance,\n  addStoreToCity,\n  somethingFailed,\n  failingAcknowledgement,\n} = storesSlice.actions;\n\nexport const nearestStore = (destination: IDestination): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  try {\n    let { filters, items } = getState().destination;\n\n    let destDetails: IDestinationDetails = {\n      destination,\n      filters,\n      items,\n      error: null,\n    };\n    let nearest: APIStoreResponse = await getNearestStore(destDetails);\n\n    dispatch(setStoresNearestDistance(nearest.results[0]));\n    dispatch(failingAcknowledgement());\n  } catch (err) {\n    console.error(`No calls were made ${err}`);\n    dispatch(somethingFailed(err));\n  }\n};\n\nexport const storeByCity = (city: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  try {\n    let stores: APIStoreResponse = await getStoresInCity(city);\n\n    dispatch(setStoresByCity(stores.results));\n    dispatch(failingAcknowledgement());\n  } catch (err) {\n    console.error(`No calls were made ${err}`);\n    dispatch(somethingFailed(err));\n  }\n};\n\nexport const selectDestination = (state: RootState) => state.destination;\n\nexport default storesSlice.reducer;\n","import { IDestinationDetails, SearchNearestBy } from \"types/destinationTypes\";\n\nexport const initialState: IDestinationDetails = {\n  error: null,\n  destination: {\n    name: \"\",\n    address: \"\",\n    address_two: \"\",\n    description: \"\",\n    country: \"\",\n    city: \"\",\n    zip_code: \"\",\n    state: \"\",\n    latitude: 4.690884099999999,\n    longitude: -74.860183,\n  },\n  filters: {\n    searchBy: SearchNearestBy.distance,\n    searchOpen: false,\n  },\n  items: [\n    {\n      name: \"beer\",\n      quantity: 6,\n    },\n  ],\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"redux/store\";\nimport { IDestination, IFilter, IOrderItem } from \"types/destinationTypes\";\n\nimport { initialState } from \"./destinationInitialstate\";\n\nexport const destinationSlice = createSlice({\n  name: \"destination\",\n  initialState,\n  reducers: {\n    setDestination: (state, action: PayloadAction<IDestination>) => {\n      state.destination = action.payload;\n    },\n    setFilters: (state, action: PayloadAction<IFilter>) => {\n      state.filters = action.payload;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addItemToOrder: (state, action: PayloadAction<IOrderItem>) => {\n      let items = state.items || [];\n      let alreadyThere = items.findIndex(\n        (elem) => elem.name === action.payload.name\n      );\n      state.items =\n        alreadyThere >= 0\n          ? [\n              ...items.slice(0, alreadyThere),\n              action.payload,\n              ...items.slice(alreadyThere),\n            ]\n          : [...items, action.payload];\n    },\n    deleteItemFromOrder: (state, action: PayloadAction<IOrderItem>) => {\n      let items = state.items || [];\n      let alreadyThere = items.findIndex(\n        (elem) => elem.name === action.payload.name\n      );\n      state.items =\n        alreadyThere >= 0\n          ? [...items.slice(0, alreadyThere), ...items.slice(alreadyThere + 1)]\n          : state.items;\n    },\n    somethingFailed(state, action: PayloadAction<Error>) {\n      state.error = action.payload;\n      console.info(\"redux state not modified\");\n    },\n    failingAcknowledgement(state) {\n      state.error = null;\n    },\n  },\n});\n\nexport const {\n  setDestination,\n  setFilters,\n  addItemToOrder,\n  deleteItemFromOrder,\n  somethingFailed,\n  failingAcknowledgement,\n} = destinationSlice.actions;\n\nexport const sentDestinationToApi = (destination: IDestination): AppThunk => (\n  dispatch\n) => {\n  try {\n    dispatch(setDestination(destination));\n    dispatch(failingAcknowledgement());\n  } catch (err) {\n    console.error(`No calls were made ${err}`);\n    dispatch(somethingFailed(err));\n  }\n};\n\nexport const selectDestination = (state: RootState) => state.destination;\n\nexport default destinationSlice.reducer;\n","import HomeContainer from \"./HomeContainer\";\n\nexport default HomeContainer;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport HomeView from \"./HomeView\";\nimport { IDestination, SearchNearestBy } from \"types/destinationTypes\";\nimport { RootState } from \"redux/store\";\nimport { IStore } from \"types/storeTypes\";\nimport { nearestStore, storeByCity } from \"redux/ducks/stores/storesSlice\";\nimport { sentDestinationToApi } from \"redux/ducks/destination/destinationSlice\";\n\ninterface IHomeProps {}\n\nconst HomeContainer = ({}: IHomeProps) => {\n  const defaultCenter = { lat: 1.3521, lng: 103.8198 };\n  const dispatch = useDispatch();\n  const destination: IDestination = useSelector(\n    (state: RootState) => state.destination.destination\n  );\n  const stores: Array<IStore> =\n    useSelector((state: RootState) => state.stores.cityStores) || [];\n\n  const nearest: IStore | undefined = useSelector((state: RootState) =>\n    state.destination.filters.searchBy === SearchNearestBy.distance\n      ? state.stores.nearest.distance\n      : state.stores.nearest.time\n  );\n\n  const [mapServices, setMapServices] = useState<any>({});\n  const [locationLoaded, setLocationLoaded] = useState(false);\n\n  const setGMapsServices = (gServices: any) => {\n    let center = new gServices.maps.LatLng(\n      defaultCenter.lat,\n      defaultCenter.lng\n    );\n\n    //This one could be dalayed but is not a promise, so setState inside again\n    if (navigator && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          const coords = pos.coords;\n          center = new gServices.maps.LatLng(coords.latitude, coords.longitude);\n          setMapServices({ ...gServices, mapInitialLatLng: center });\n          setLocationLoaded(true);\n        },\n        (error) => {\n          console.error(\"Cant Get Position\", error);\n        }\n      );\n    }\n    setMapServices({ ...gServices, mapInitialLatLng: center });\n  };\n\n  useEffect(() => {\n    console.log(\"the new map service is\", mapServices);\n  }, [mapServices]);\n\n  const onDestinationSubmit = (destination: IDestination) => {\n    console.log(\"the submit is, \", destination);\n    dispatch(sentDestinationToApi(destination));\n    dispatch(nearestStore(destination));\n  };\n\n  const getAllStoresInCity = (city: string) => {\n    if (city === undefined || city === \"\") {\n      return;\n    }\n    dispatch(storeByCity(city));\n  };\n\n  return (\n    <HomeView\n      onApiLoad={setGMapsServices}\n      nearest={nearest}\n      mapServices={mapServices}\n      destination={destination}\n      storesList={stores || []}\n      onDestinationSubmit={onDestinationSubmit}\n      locationLoaded={locationLoaded}\n      getAllStoresInCity={getAllStoresInCity}\n    ></HomeView>\n  );\n};\n\nexport default HomeContainer;\n","export const theme = {\n  main: \"mediumseagreen\",\n};\n","import React from \"react\";\nimport Home from \"containers/home\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"themes/theme\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Home></Home>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport destinationReducer from \"./ducks/destination/destinationSlice\";\nimport storesReducer from \"./ducks/stores/storesSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: destinationReducer,\n    destination: destinationReducer,\n    stores: storesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}